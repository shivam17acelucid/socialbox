{"version":3,"file":"static/js/21.5f0bef17.chunk.js","mappings":"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GACvKF,YAAcG,EAAcH,aAAe,IACxCG,EAAcH,WAChD,EAEKH,GAAY,CACd,CACI1J,MAAO,EACP6J,YAAa,IACbvH,MAAO,MAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,QAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,MAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,QAEX,CACItC,MAAO,IACP6J,YAAa,IACbvH,MAAO,QAITkH,GAAe,CACjB,CACIxJ,MAAO,EACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,IACP6J,YAAa,IACbvH,MAAO,SAITiH,GAAa,CACf,CACIvJ,MAAO,EACP6J,YAAa,IACbvH,MAAO,QAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,QAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,QAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,QAEX,CACItC,MAAO,IACP6J,YAAa,IACbvH,MAAO,OAITgH,GAAY,CACd,CACItJ,MAAO,EACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,SAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,KACbvH,MAAO,SAEX,CACItC,MAAO,IACP6J,YAAa,IACbvH,MAAO,SAITmH,GAAa,CACf,CACIzJ,MAAO,EACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,GACP6J,YAAa,IACbvH,MAAO,OAEX,CACItC,MAAO,IACP6J,YAAa,IACbvH,MAAO,QAITqH,GAAiB,CACnB,CACI3J,MAAO,EACP6J,YAAa,IACbvH,MAAO,MAEX,CACItC,MAAO,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","sources":["Common/NumberFormatter/numFormatter.js","Common/Sidebar/sidebardata.js","Common/Sidebar/sidebar.js","Common/TopBar/index.js","Components/SearchResults/influencerlists.js"],"sourcesContent":["function NFormatter(num) {\r\n    if (num >= 1000000000) {\r\n        return (num / 1000000000).toFixed(1).replace(/\\.0$/, '') + 'G';\r\n    }\r\n    if (num >= 1000000) {\r\n        return (num / 1000000).toFixed(1).replace(/\\.0$/, '') + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n        return (num / 1000).toFixed(1).replace(/\\.0$/, '') + 'K';\r\n    }\r\n    return num;\r\n}\r\n\r\nexport default NFormatter;","import React, { useEffect } from \"react\";\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as MdIcons from 'react-icons/md';\r\nconst userId = localStorage.getItem('id');\r\nexport const SidebarData = [\r\n\r\n    {\r\n        title: 'Home',\r\n        path: `/home/${userId}`,\r\n        icon: <AiIcons.AiFillHome />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Compare',\r\n        icon: <MdIcons.MdCompare />,\r\n        path: \"/CompareInfluencers\",\r\n        cName: 'nav-text',\r\n        // children: [\r\n        //     {\r\n        //         title: \"Influencers\",\r\n        //         cName: 'nav-nested',\r\n        //     },\r\n        //     {\r\n        //         title: \"Lists\",\r\n        //         path: \"/CompareLists\",\r\n        //         cName: 'nav-nested',\r\n        //     }\r\n        // ]\r\n    },\r\n    {\r\n        title: 'Calculator',\r\n        path: '/calculate',\r\n        icon: <AiIcons.AiFillCalculator />,\r\n        cName: 'nav-text'\r\n    },\r\n]","import React, { useState } from \"react\";\r\nimport './sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { SidebarData } from \"./sidebardata\";\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport { IconContext } from \"react-icons/lib\";\r\nimport { AiFillCaretDown } from 'react-icons/ai';\r\nimport { AiFillCaretRight } from 'react-icons/ai';\r\nimport logo from '../../Assets/Images/logo.png';\r\n\r\nfunction Navbar() {\r\n    const [sidebar, setSidebar] = useState(false);\r\n    // const [expandCompare, setExpandCompare] = useState(false);\r\n\r\n    const showSidebar = () => setSidebar(!sidebar);\r\n    // const showExpandedMenu = (item) => {\r\n    //     if (item.title === 'Compare') {\r\n    //         setExpandCompare(!expandCompare);\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <IconContext.Provider value={{ color: '#fff' }}>\r\n            <div className={sidebar ? 'nav-menu' : 'nav-menu-active'}>\r\n                <nav className=\"navbar\">\r\n                    {/* <div className={sidebar ? 'navbar-inactive' : 'navbar'} >\r\n                        <Link to='#' className='menu-bars'>\r\n                            <FaIcons.FaBars onClick={showSidebar} />\r\n                        </Link>\r\n                    </div> */}\r\n                    <img src={logo} className='logo' />\r\n                    <ul className=\"nav-menu-items\">\r\n                        {\r\n                            SidebarData.map((item, index) => {\r\n                                return (\r\n                                    <li className={item.cName}>\r\n                                        {\r\n                                            sidebar === true ?\r\n                                                <Link to={item.path}>\r\n                                                    {item.icon}\r\n                                                </Link>\r\n                                                :\r\n                                                <Link to={item.path}>\r\n                                                    {item.icon}\r\n                                                    <span\r\n                                                    // onClick={() => showExpandedMenu(item)}\r\n                                                    >{item.title}</span>\r\n                                                    {/* {item.title === 'Compare' ? \r\n                                                    <span onClick={() => showExpandedMenu(item)} className='sideicon'>{expandCompare === true ? <AiFillCaretDown /> : <AiFillCaretRight />}</span> : null} */}\r\n                                                    {/* {\r\n                                                    // expandCompare === true ?\r\n                                                    //     item.title === 'Compare' ?\r\n                                                            [item].map((data) =>\r\n                                                                data.children.map((result) =>\r\n                                                                    <Link to={result.path} className='nav-nested' >\r\n                                                                        <span \r\n                                                                        // onClick={() => showExpandedMenu(item)}\r\n                                                                        >{result.title}</span>\r\n                                                                    </Link>\r\n                                                                )\r\n\r\n                                                            ) \r\n                                                            // :\r\n                                                            // null : null\r\n                                                            } */}\r\n                                                </Link>\r\n                                        }\r\n\r\n                                    </li>\r\n                                );\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </nav>\r\n            </div >\r\n        </IconContext.Provider >\r\n    )\r\n}\r\nexport default Navbar;","import React, { useState, useEffect } from \"react\";\r\nimport './index.scss';\r\nimport help from '../../Assets/Images/help.png';\r\nimport { MdOutlineArrowDropDown } from 'react-icons/md';\r\nimport { useNavigate, Link, useLocation, useParams } from 'react-router-dom';\r\nimport UserIcon from '../../Assets/Images/userIcon.png';\r\n\r\nfunction TopBar() {\r\n\r\n    const [showDropDownSelected, setShowDropdownSelected] = useState(false);\r\n    const [comparedPageVisited, setComparedPageVisited] = useState(false);\r\n    const userId = localStorage.getItem('id');\r\n    const userName = localStorage.getItem('name');\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const params = useParams()\r\n\r\n    let TOPBAR_TEXTS = [{ page: `/home/${userId}`, text: \"Home\" }, { page: \"/CompareLists\", text: \"Compare Lists\" }, { page: \"/CompareInfluencers\", text: \"Compare Influencers\" }, { page: \"/influencerslist/\", text: \"Search Results\" }, { page: \"/basketInfluencers\", text: \"Influencer Bundle\" }, { page: \"/userLists\", text: \"List\" }, { page: \"/profile\", text: \"Influencer Profile\" }, { page: `/updateprofile/${userId}`, text: \"Profile Settings\" }, { page: `/calculate`, text: \"Calculate Cost\" }]\r\n    let textToShow = TOPBAR_TEXTS.find(el => location.pathname.includes(el.page))?.text\r\n\r\n    const checkPage = () => {\r\n        {\r\n            textToShow === 'Compare Influencers' || textToShow === 'Compare Lists' ?\r\n                setComparedPageVisited(true)\r\n                :\r\n                setComparedPageVisited(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkPage();\r\n    },[params])\r\n\r\n    const handleShowProfileDropdown = () => {\r\n        let data = showDropDownSelected ? false : true;\r\n        setShowDropdownSelected(data)\r\n    }\r\n\r\n    const handleRedirectToProfileSettings = () => {\r\n        navigate(`/updateprofile/${userId}`)\r\n    }\r\n\r\n    const handleRedireactToAbout = () => {\r\n        navigate(`/about`)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        <Link to='/' />\r\n        localStorage.clear();\r\n        // let url = `http://13.234.29.72:4000/logout`;\r\n        // fetch((url), {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'Content-type': 'application/json; charset=UTF-8',\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"topbar\">\r\n                <div className={comparedPageVisited === true ? \"page_title_compared\" : \"page_title\"}>\r\n                    {textToShow}\r\n                    {textToShow === 'Compare Influencers' || textToShow === 'Compare Lists' ?\r\n                        <div style={{ display: 'flex', paddingTop: '1rem' }}>\r\n                            <div style={{ paddingLeft: '1.25rem' }}>\r\n                                <Link to=\"/CompareInfluencers\" className=\"tab_text\">Influencers</Link>\r\n                            </div>\r\n                            <div style={{ paddingLeft: '3.5rem' }}>\r\n                                <Link to=\"/CompareLists\" className=\"tab_text\">List</Link>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <span className=\"topbar_help_icon\"><img src={help} /></span>\r\n                    <img src={UserIcon} className=\"topbar_user_icon\" />\r\n                    <span className=\"topbar_username\">{userName}</span>\r\n                    <span style={{ marginRight: '4rem', cursor: 'pointer' }}><MdOutlineArrowDropDown onClick={handleShowProfileDropdown} /></span>\r\n                </div>\r\n            </div>\r\n            {\r\n                showDropDownSelected === true ?\r\n                    <div className=\"dropdown\">\r\n                        <div onClick={handleRedirectToProfileSettings} className=\"dropdown_title\">Profile Settings</div>\r\n                        <div onClick={handleRedireactToAbout} className=\"dropdown_title\">About</div>\r\n                        <div onClick={handleLogout} className=\"dropdown_title\"><Link to='/'>Logout</Link></div>\r\n                    </div>\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default TopBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport NFormatter from \"../../Common/NumberFormatter/numFormatter\";\r\nimport './influencerlists.scss';\r\nimport Navbar from \"../../Common/Sidebar/sidebar\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport { Input } from \"reactstrap\";\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { AiFillCaretDown, AiOutlineDownload, AiOutlineClose } from 'react-icons/ai';\r\nimport { MdOutlineArrowDropUp, MdDelete } from 'react-icons/md';\r\nimport { BiFirstPage } from 'react-icons/bi';\r\nimport { BiLastPage } from 'react-icons/bi';\r\nimport moment from \"moment\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport TopBar from '../../Common/TopBar/index';\r\nimport ListIcon from '../../Assets/Images/listicon.png';\r\nimport CostIcon from '../../Assets/Images/costicon.png';\r\nimport CompareIcon from '../../Assets/Images/compareicon.png';\r\nimport Slider from '@mui/material/Slider';\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport Select from 'react-select';\r\nconst options = [\r\n    { value: 'Nano(1K-10K Followers)', label: 'Nano(1K-10K Followers)' },\r\n    { value: 'Micro(10K-50K Followers)', label: 'Micro(10K-50K Followers)' },\r\n    { value: 'Mid-Tier(50K-100K Followers)', label: 'Mid-Tier(50K-100K Followers)' },\r\n    { value: 'Macro(100K-1M Followers)', label: 'Macro(100K-1M Followers)' },\r\n    { value: 'Mega(1M + Followers)', label: 'Mega(1M + Followers)' },\r\n];\r\nconst options1 = [\r\n    { value: 'Nano(1K-10K Followers)', label: 'Nano(1K-10K Followers)' },\r\n    { value: 'Micro(10K-50K Followers)', label: 'Micro(10K-50K Followers)' },\r\n    { value: 'Mid-Tier(50K-100K Followers)', label: 'Mid-Tier(50K-100K Followers)' },\r\n    { value: 'Macro(100K-1M Followers)', label: 'Macro(100K-1M Followers)' },\r\n    { value: 'Mega(1M + Followers)', label: 'Mega(1M + Followers)' },\r\n];\r\n\r\nconst InfluencersList = () => {\r\n\r\n    const [influencersData, setInfluencersData] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(7);\r\n    const [showVerifiedInfluencers, setShowVerifiedInfluencers] = useState(false);\r\n    const [verifiedInfluencers, setVerifiedInfluencers] = useState([]);\r\n    const [category, setCategory] = useState('');\r\n    const [categoryBasedInfluencers, setCategoryBasedInfluencers] = useState([]);\r\n    const [erBasedInfluencers, setErBasedInfluencers] = useState([]);\r\n    const [followersRangeBasedInfluencers, setFollowersRangeBasedInfluencers] = useState([]);\r\n    const [isfilterFollowerClicked, setIsFilterFollowerClicked] = useState(false);\r\n    const [isfilterCategoryClicked, setIsFilterCategoryClicked] = useState(false);\r\n    const [isfilterErClicked, setIsFilterErClicked] = useState(false);\r\n    const [filterFollowerClicked, setFilterFollowerClicked] = useState(false);\r\n    const [filterCategoryClicked, setFilterCategoryClicked] = useState(false);\r\n    const [filterErClicked, setFilterErClicked] = useState(false);\r\n    const [newPlanClicked, setNewPlanClicked] = useState(false);\r\n    // const [listName, setListName] = useState('');\r\n    // const [brandName, setBrandName] = useState('');\r\n    const [listData, setListData] = useState([]);\r\n    const [addToListTableClicked, setAddToListTableClicked] = useState(false);\r\n    const [listInfluencerDetails, setListInfluencerDetails] = useState([]);\r\n    const [listClicked, setListClicked] = useState(false);\r\n    const [listInfluencersData, setListInfluencersData] = useState([]);\r\n    const [rowClickedData, setRowClickedData] = useState('');\r\n    const [addToCompareClicked, setAddToCompareClicked] = useState(false);\r\n    const [addToCompareData, setAddToCompareData] = useState([]);\r\n    const [influencer, setInfluencer] = useState([]);\r\n    const [removeInfluencerClicked, setRemoveInfluencerClicked] = useState(false);\r\n    const [autoSuggestedData, setAutoSuggestedData] = useState([]);\r\n    const [csvData, setCsvData] = useState('');\r\n\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [suggestionIndex, setSuggestionIndex] = useState(0);\r\n    const [suggestionsActive, setSuggestionsActive] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const [minRangeFollowers, setMinRangeFollowers] = useState(1000)\r\n    const [maxRangeFollowers, setMaxRangeFollowers] = useState(10000)\r\n    const [rangeEr, setRangeEr] = useState([0, 20]);\r\n    const [silderRolled, setSliderRolled] = useState(false);\r\n    const [silderErRolled, setSliderErRolled] = useState(false);\r\n    const [sliderRolled1, setSlider1Rolled] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [redirectedResult, setRedirectedResult] = useState(false);\r\n    const [suggestionsForInputActive, setSuggestionsForInputActive] = useState(false);\r\n    const [suggestions1, setSuggestions1] = useState([]);\r\n    const [costModalOpened, setCostModalOpened] = useState(false);\r\n    const [costUser, setCostUser] = useState('');\r\n    const [allFilterCleared, setAllFilterCleared] = useState(false);\r\n\r\n    const [nanoClicked, setNanoClicked] = useState(false);\r\n    const [microClicked, setMicroClicked] = useState(false);\r\n    const [midTierClicked, setMidTierClicked] = useState(false);\r\n    const [macroClicked, setMacroClicked] = useState(false);\r\n    const [megaClicked, setMegaClicked] = useState(false);\r\n    const [nanoMaxClicked, setNanoMaxClicked] = useState(false);\r\n    const [microMaxClicked, setMicroMaxClicked] = useState(false);\r\n    const [midTierMaxClicked, setMidTierMaxClicked] = useState(false);\r\n    const [macroMaxClicked, setMacroMaxClicked] = useState(false);\r\n    const [megaMaxClicked, setMegaMaxClicked] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [selectedOption1, setSelectedOption1] = useState(null);\r\n    const [categoryFilteredData, setCategoryFilteredData] = useState([])\r\n\r\n    let { inputField, eRange, followerRange } = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const userId = localStorage.getItem('id');\r\n    let autoSuggestedArray = [];\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const fetchAllData = () => {\r\n        const url = `http://13.234.29.72:4000/getrelatedinfluencers?inputField`;\r\n        fetch(url)\r\n            .then((data) => {\r\n                data.json()\r\n                    .then((res) => {\r\n                        res.map((item) => {\r\n                            autoSuggestedArray.push(item.username)\r\n                            setAutoSuggestedData(autoSuggestedArray)\r\n                        })\r\n                    })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const showVerified = () => {\r\n        const data = showVerifiedInfluencers ? false : true;\r\n        setShowVerifiedInfluencers(data);\r\n        let arr = [];\r\n        influencersData.forEach((data) => {\r\n            if (data.is_verified === true) {\r\n                arr.push(data)\r\n                setVerifiedInfluencers(arr)\r\n            }\r\n        })\r\n    }\r\n\r\n    const redirectProfile = (data) => {\r\n        navigate(`/profile/${data.username}`)\r\n    }\r\n\r\n    const handleFollowerFilterClicked = () => {\r\n        setIsFilterFollowerClicked(value => !value)\r\n    };\r\n\r\n    const handleCategoryFilterClicked = () => setIsFilterCategoryClicked(value => !value);\r\n\r\n    const handleErFilterClicked = () => setIsFilterErClicked(value => !value);\r\n\r\n    const scale = value => {\r\n        const previousMarkIndex = Math.floor(value / 25);\r\n        const previousMark = (megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange)[previousMarkIndex];\r\n        const remainder = value % 25;\r\n        if (remainder === 0) {\r\n            return previousMark.scaledValue;\r\n        }\r\n        const nextMark = (megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange)[previousMarkIndex + 1];\r\n        const increment = (nextMark.scaledValue - previousMark.scaledValue) / 25;\r\n        return remainder * increment + previousMark.scaledValue;\r\n    };\r\n\r\n    const scale1 = value => {\r\n        const previousMarkIndex1 = Math.floor(value / 25);\r\n        const previousMark1 = (megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange)[previousMarkIndex1];\r\n        const remainder = value % 25;\r\n        if (remainder === 0) {\r\n            return previousMark1.scaledValue;\r\n        }\r\n        const nextMark = (megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange)[previousMarkIndex1 + 1];\r\n        const increment = (nextMark.scaledValue - previousMark1.scaledValue) / 25;\r\n        return remainder * increment + previousMark1.scaledValue;\r\n    };\r\n\r\n    const nanoRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000,\r\n            label: \"1k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 2500,\r\n            label: \"2.5k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 5000,\r\n            label: \"5k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 7500,\r\n            label: \"7.5k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        }\r\n    ];\r\n\r\n    const midTierRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 60000,\r\n            label: \"60k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 75000,\r\n            label: \"75k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 90000,\r\n            label: \"90k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        }\r\n    ];\r\n\r\n    const macroRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 250000,\r\n            label: \"250k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 500000,\r\n            label: \"500k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 750000,\r\n            label: \"750k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 1000000,\r\n            label: \"1M\"\r\n        }\r\n    ];\r\n\r\n    const megaRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000000,\r\n            label: \"1M+\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 2500000,\r\n            label: \"2.5M+\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 5000000,\r\n            label: \"5M+\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 7500000,\r\n            label: \"7.5M+\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 10000000,\r\n            label: \"10M+\"\r\n        }\r\n    ]\r\n\r\n    const microRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 20000,\r\n            label: \"20k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 30000,\r\n            label: \"30k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 40000,\r\n            label: \"40k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        }\r\n    ];\r\n\r\n    const followersRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000,\r\n            label: \"1k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 5000,\r\n            label: \"5k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 25000,\r\n            label: \"25k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        },\r\n        {\r\n            value: 125,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        },\r\n        {\r\n            value: 150,\r\n            scaledValue: 250000,\r\n            label: \"250k\"\r\n        },\r\n        {\r\n            value: 175,\r\n            scaledValue: 500000,\r\n            label: \"500k\"\r\n        },\r\n        {\r\n            value: 200,\r\n            scaledValue: 1000000,\r\n            label: \"1M\"\r\n        }\r\n    ];\r\n\r\n    const ErRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 0,\r\n            label: \"0\"\r\n        },\r\n        {\r\n            value: 5,\r\n            scaledValue: 5,\r\n            label: \"5\"\r\n        },\r\n        {\r\n            value: 10,\r\n            scaledValue: 10,\r\n            label: \"10\"\r\n        },\r\n        {\r\n            value: 15,\r\n            scaledValue: 15,\r\n            label: \"15\"\r\n        },\r\n        {\r\n            value: 20,\r\n            scaledValue: 20,\r\n            label: \"20\"\r\n        }\r\n    ];\r\n\r\n    function numFormatter(num) {\r\n        if (num > 999 && num < 1000000) {\r\n            return (num / 1000).toFixed(0) + \"K\"; // convert to K for number from > 1000 < 1 million\r\n        } else if (num >= 1000000) {\r\n            return (num / 1000000).toFixed(0) + \"M\"; // convert to M for number from > 1 million\r\n        } else if (num < 900) {\r\n            return num; // if value < 1000, nothing to do\r\n        }\r\n    }\r\n\r\n    const filterCategory = () => {\r\n        let array = [];\r\n        setIsFilterCategoryClicked(false);\r\n        influencersData.forEach((data) => {\r\n            if (data.category_enum !== null) {\r\n                if (data.category_enum.includes(category.toUpperCase())) {\r\n                    array.push(data)\r\n                    setCategoryFilteredData(array)\r\n                    setFilterCategoryClicked(true)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const filterByFollowersRange = () => {\r\n        let splitFoll;\r\n        let splitFollArr;\r\n        setIsFilterFollowerClicked(false);\r\n        if (!inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist//eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    navigate(`/influencerslist//followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = eRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist//eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist//followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`)\r\n            }\r\n        }\r\n        else if (inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist/${inputField}/eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    navigate(`/influencerslist/${inputField}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = eRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist/${inputField}/eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist/${inputField}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const filterByErRange = () => {\r\n        let splitFoll;\r\n        let splitFollArr;\r\n        setIsFilterErClicked(false);\r\n        if (!inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = followerRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                console.log(rangeEr[0], rangeEr[1]);\r\n                navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n            }\r\n        }\r\n        else if (inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = followerRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getListData = () => {\r\n        const url = `http://13.234.29.72:4000/getListData/${userId}`;\r\n        fetch(url)\r\n            .then((data) => {\r\n                data.json()\r\n                    .then((result) => {\r\n                        setListData(result)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const handleDownloadData = () => {\r\n        const url = `http://13.234.29.72:4000/downloadcsv`;\r\n        fetch((url), {\r\n            headers: {\r\n                'Content-type': 'text/csv; charset=UTF-8',\r\n            }\r\n        })\r\n            .then((res) => {\r\n                res.text()\r\n                    .then((data) => {\r\n                        setCsvData(data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const handleCostClicked = (e) => {\r\n        setCostUser(e.username)\r\n        let data = costModalOpened ? false : true;\r\n        setCostModalOpened(data)\r\n    }\r\n\r\n    const handleClearAllFilters = () => {\r\n        setFilterCategoryClicked(false);\r\n        setFilterErClicked(false);\r\n        setFilterFollowerClicked(false);\r\n        setAllFilterCleared(!allFilterCleared)\r\n        setShowVerifiedInfluencers(false)\r\n        navigate(`/influencerslist/${inputField}`)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     fetchProfiles();\r\n    //     getListData();\r\n    // }, []);    \r\n\r\n    const fetchProfiles = () => {\r\n        let str = '';\r\n        let follString = '';\r\n        let splitArray;\r\n        let splitFollArray;\r\n        if (eRange && !followerRange) {\r\n            if (eRange.includes('eRange')) {\r\n                str = eRange.split('=');\r\n                splitArray = str[1].split('&');\r\n                const url = `http://13.234.29.72:4000/getFilteredResults?inputField=${inputField}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n            if (eRange.includes('followerRange')) {\r\n                follString = eRange.split('=')\r\n                splitFollArray = follString[1].split('&')\r\n                const url = `http://13.234.29.72:4000/getFilteredResults?inputField=${inputField}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n        }\r\n        if (eRange && followerRange) {\r\n            str = eRange.split('=');\r\n            splitArray = str[1].split('&');\r\n            follString = followerRange.split('=')\r\n            splitFollArray = follString[1].split('&')\r\n            const url = `http://13.234.29.72:4000/getFilteredResults?inputField=${inputField}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setInfluencersData(res)\r\n                        })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n        if (!eRange && !followerRange) {\r\n            const url = `http://13.234.29.72:4000/getFilteredResults?inputField=${inputField}`;\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setInfluencersData(res)\r\n                        })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchAllData();\r\n        fetchProfiles();\r\n        getListData();\r\n    }, [redirectedResult]);\r\n\r\n    useEffect(() => {\r\n        getListData();\r\n    }, [newPlanClicked]);\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [allFilterCleared]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption !== null) {\r\n            if (selectedOption.label.includes('Mega(1M + Followers)')) {\r\n                setMegaClicked(true);\r\n                setMicroClicked(false);\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Macro(100K-1M Followers)')) {\r\n                setMacroClicked(true);\r\n                setMicroClicked(false);\r\n                setMidTierClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Mid-Tier(50K-100K Followers)')) {\r\n                setMidTierClicked(true)\r\n                setMicroClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Micro(10K-50K Followers)')) {\r\n                setMicroClicked(true)\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Nano(1K-10K Followers)')) {\r\n                setNanoClicked(true)\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setMicroClicked(false);\r\n            }\r\n        }\r\n    }, [selectedOption])\r\n\r\n    useEffect(() => {\r\n        if (selectedOption1 !== null) {\r\n            if (selectedOption1.label.includes('Mega(1M + Followers)')) {\r\n                setMegaMaxClicked(true);\r\n                setMicroMaxClicked(false);\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Macro(100K-1M Followers)')) {\r\n                setMacroMaxClicked(true);\r\n                setMicroMaxClicked(false);\r\n                setMidTierMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Mid-Tier(50K-100K Followers)')) {\r\n                setMidTierMaxClicked(true)\r\n                setMicroMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Micro(10K-50K Followers)')) {\r\n                setMicroMaxClicked(true)\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Nano(1K-10K Followers)')) {\r\n                setNanoMaxClicked(true)\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setMicroMaxClicked(false);\r\n            }\r\n        }\r\n    }, [selectedOption1])\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [isfilterErClicked])\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [isfilterFollowerClicked])\r\n\r\n\r\n    const handleAddPlan = () => {\r\n        const data = newPlanClicked ? false : true;\r\n        setNewPlanClicked(data);\r\n    }\r\n\r\n\r\n    const handleCreateList = (listName) => {\r\n        const url = `http://13.234.29.72:4000/createList/${userId}`\r\n        fetch((url), {\r\n            method: 'POST',\r\n            body: JSON.stringify({ listName }),\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n        })\r\n            .then((res) => { res.json() })\r\n            .then((data) => {\r\n                setListInfluencerDetails(data)\r\n            })\r\n        setNewPlanClicked(false);\r\n    }\r\n\r\n    const handleAddToListTable = (e) => {\r\n        setRowClickedData(e.username)\r\n        const toggle = addToListTableClicked ? false : true;\r\n        setAddToListTableClicked(toggle);\r\n    }\r\n\r\n    const handleListClick = (item) => {\r\n        setListClicked(true);\r\n        const url = `http://13.234.29.72:4000/showInfluencersList/${userId}?list=${item.listName}`\r\n        fetch((url))\r\n            .then((data) => data.json())\r\n            .then((response) => {\r\n                setListInfluencersData([response])\r\n            })\r\n    }\r\n\r\n    const addInfluencerToList = (data, item) => {\r\n        const url = `http://13.234.29.72:4000/addInfluencersToList/${userId}?list=${item.listName}&username=${data.username}`\r\n        fetch((url), {\r\n            method: 'POST',\r\n        })\r\n            .then((data) => { data.json() })\r\n            .then((res) => {\r\n                console.log(res)\r\n            })\r\n        setAddToListTableClicked(false)\r\n    }\r\n\r\n    const handleAddToCompare = (data) => {\r\n        const toggle = addToCompareClicked ? false : true;\r\n        setAddToCompareClicked(toggle);\r\n        setAddToCompareData([{ username: data.username }])\r\n    }\r\n\r\n    const handleRemoveInfluencer = (data) => {\r\n        setAddToCompareData((current) => current.filter((item) =>\r\n            item.username !== data.username\r\n        ))\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const query = e.target.value.toLowerCase();\r\n        setValue(query);\r\n        if (query.length > 1) {\r\n            let url = `http://13.234.29.72:4000/filterUsers?username=${query}`\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setSuggestions(res)\r\n                        })\r\n                })\r\n            setSuggestionsActive(true);\r\n        } else {\r\n            setSuggestionsActive(false);\r\n        }\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        setInfluencer(e.target.innerText)\r\n        setSuggestions([]);\r\n        setValue('');\r\n        setSuggestionsActive(false);\r\n        {\r\n            const abc = addToCompareData.find((item) => item.username === e.target.innerText)\r\n            if (!abc) {\r\n                setAddToCompareData([...addToCompareData, { username: e.target.innerText }])\r\n            }\r\n        }\r\n        console.log(addToCompareData)\r\n    };\r\n\r\n    const Suggestions = () => {\r\n        return (\r\n            <div className=\"suggestions\">\r\n                {suggestions.map((suggestion, index) => {\r\n                    return (\r\n                        <div\r\n                            className={index === suggestionIndex ? \"active_inf\" : \"non_active\"}\r\n                            key={index}\r\n                            onClick={handleClick}\r\n                        >\r\n                            {suggestion.username}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    function TablePaginationActions(count) {\r\n        const handleFirstPageButtonClick = (event) => {\r\n            setPage(0);\r\n        };\r\n\r\n        const handleBackButtonClick = (event) => {\r\n            setPage(page - 1);\r\n        };\r\n\r\n        const handleNextButtonClick = (event) => {\r\n            setPage(page + 1);\r\n        };\r\n\r\n        const handleLastPageButtonClick = (event) => {\r\n            setPage(Math.max(0, Math.ceil(count.count / rowsPerPage) - 1));\r\n        };\r\n\r\n        return (\r\n            <div style={{ display: 'flex' }}>\r\n                <IconButton\r\n                    onClick={handleFirstPageButtonClick}\r\n                    disabled={page === 0}\r\n                    aria-label=\"first page\"\r\n                >\r\n                    <FirstPageIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleBackButtonClick}\r\n                    disabled={page === 0}\r\n                    aria-label=\"previous page\"\r\n                >\r\n                    <KeyboardArrowLeft />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleNextButtonClick}\r\n                    aria-label=\"next page\"\r\n                    disabled={page >= Math.ceil(count.count / rowsPerPage) - 1}\r\n                >\r\n                    <KeyboardArrowRight />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleLastPageButtonClick}\r\n                    disabled={page >= Math.ceil(count.count / rowsPerPage) - 1}\r\n                    aria-label=\"last page\"\r\n                >\r\n                    <LastPageIcon />\r\n                </IconButton>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleCompareInfluencers = () => {\r\n        let params = '';\r\n        let result = ''\r\n        let string = ''\r\n        addToCompareData.map((item) => {\r\n            result += params.concat(params, `&influencers=${item.username}`)\r\n            string = result.substring(1);\r\n        })\r\n        navigate(`/CompareInfluencers/${string}`)\r\n        // const url = `http://13.234.29.72:4000/compareInfluencers?${string}`;\r\n        // fetch(url)\r\n        //     .then((res) => {\r\n        //         res.json()\r\n        //             .then((data) => {\r\n        //                 console.log(data)\r\n        //             })\r\n        //     })\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const query = e.target.value.toLowerCase();\r\n        setInputValue(query);\r\n        if (query.length > 1) {\r\n            let url = `http://13.234.29.72:4000/filterUsers?username=${query}`\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setSuggestions1(res)\r\n                        })\r\n                })\r\n            setSuggestionsForInputActive(true);\r\n        } else {\r\n            setSuggestionsForInputActive(false);\r\n        }\r\n    }\r\n\r\n    const handleInfluencerClick = (e) => {\r\n        navigate(`/profile/${e.target.innerText}`);\r\n        setSuggestions1([]);\r\n        setInputValue('');\r\n        setSuggestionsForInputActive(false);\r\n    };\r\n\r\n    const handleRedirectToResults = () => {\r\n        setAutoSuggestedData([])\r\n        setRedirectedResult(!redirectedResult);\r\n        navigate(`/influencerslist/${inputValue}`);\r\n        setInputValue('');\r\n        setSuggestions1([]);\r\n        setSuggestionsForInputActive(false);\r\n    }\r\n\r\n    const SuggestionsInfluencer = () => {\r\n        return (\r\n            <>\r\n                <div className=\"suggestions_influencer\">\r\n                    <div style={{\r\n                        margin: '0.313rem', padding: 0, fontFamily: 'Noto Sans',\r\n                        fontStyle: 'normal',\r\n                        fontWeight: 700,\r\n                        fontSize: '1.125rem',\r\n                        lineHeight: '1rem',\r\n                        color: 'rgba(0, 0, 0, 0.7)'\r\n                    }}>Influencers</div>\r\n                    {suggestions1.map((suggestion, index) => {\r\n                        return (\r\n                            <div\r\n                                className={index === setSuggestionsForInputActive ? \"active_influencer\" : \"\"}\r\n                                key={index}\r\n                                onClick={handleInfluencerClick}\r\n                            >\r\n                                {suggestion.username}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"search_container row no-gutters\">\r\n            <div className='col-lg-2 col-md-2 col-sm-2 col-xs-2  col-3'>\r\n                <Navbar />\r\n            </div>\r\n            <div className=\"search_content_list_panel col-lg-10 col-sm-10 col-md-10 col-xs-10 col-9\">\r\n                <TopBar />\r\n                <div className=\"middle_pane row no-gutters\">\r\n                    <div className=\"input_box_influencer col-lg-10 col-md-10 col-sm-10 col-xs-10 col-10\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder='Search for influencers, categories...'\r\n                            value={inputValue}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                        {suggestionsForInputActive && <SuggestionsInfluencer />}\r\n                        <AiOutlineSearch onClick={handleRedirectToResults} />\r\n                    </div>\r\n                    <div className=\"filter_bar row no-gutters\">\r\n                        <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleFollowerFilterClicked} className='filter_btn'>Followers {isfilterFollowerClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleCategoryFilterClicked} className='filter_btn'>Category {isfilterCategoryClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleErFilterClicked} className='filter_btn'>Engagement Rate {isfilterErClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={showVerified} className='filter_btn'>{showVerifiedInfluencers === true ? 'Back' : 'Registered influencers'}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleClearAllFilters} className='filter_btn'><AiOutlineClose /><span>Clear all filters</span></Button>\r\n                        </div>\r\n                        {\r\n                            isfilterErClicked === true ?\r\n                                <section className=\"modal_section\">\r\n                                    <div className=\"modal_option\">\r\n                                        <div>Engagement %</div>\r\n                                        <Slider\r\n                                            value={rangeEr}\r\n                                            onChange={(e, data) => {\r\n                                                setRangeEr(data)\r\n                                                setSliderErRolled(true);\r\n                                            }}\r\n                                            marks={ErRange}\r\n                                            min={0}\r\n                                            max={20}\r\n                                            step={1}\r\n                                        />\r\n                                        {\r\n                                            silderErRolled === true ?\r\n                                                <>\r\n                                                    <div className=\"followers_count_1\">Minimum ER: {rangeEr[0]}</div>\r\n                                                    <div className=\"followers_count\">Maximum ER: {rangeEr[1]}</div>\r\n                                                </>\r\n                                                :\r\n                                                <>\r\n                                                    <div className=\"followers_count_1\">Minimum ER: {rangeEr[0]}</div>\r\n                                                    <div className=\"followers_count\">Maximum ER: {rangeEr[1]}</div>\r\n                                                </>\r\n                                        }\r\n                                        <div style={{\r\n                                            display: 'flex', justifyContent: 'space-between'\r\n                                        }}>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={filterByErRange}\r\n                                            >\r\n                                                Filter\r\n                                            </Button>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={handleErFilterClicked}\r\n                                                style={{\r\n                                                    background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                    fontWeight: 600,\r\n                                                    fontSize: '0.75rem',\r\n                                                    lineHeight: '1rem',\r\n                                                    textAlign: 'center',\r\n                                                    color: '#595959'\r\n                                                }}\r\n                                            >\r\n                                                Clear\r\n                                            </Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                :\r\n                                isfilterCategoryClicked === true ?\r\n                                    <section className=\"modal_section\">\r\n                                        <div className=\"modal_option\">\r\n                                            <div>Add Category</div>\r\n                                            <Input\r\n                                                placeholder=\"Category\"\r\n                                                className=\"w-50\"\r\n                                                type=\"text\"\r\n                                                value={category}\r\n                                                onChange={(e) => { setCategory(e.target.value) }}\r\n                                            />\r\n                                            <div style={{\r\n                                                display: 'flex', justifyContent: 'space-between'\r\n                                            }}>\r\n                                                <Button\r\n                                                    color=\"primary\"\r\n                                                    onClick={filterCategory}\r\n                                                >\r\n                                                    Filter\r\n                                                </Button>\r\n                                                <Button\r\n                                                    color=\"primary\"\r\n                                                    onClick={handleCategoryFilterClicked}\r\n                                                    style={{\r\n                                                        background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                        fontWeight: 600,\r\n                                                        fontSize: '0.75rem',\r\n                                                        lineHeight: '1rem',\r\n                                                        textAlign: 'center',\r\n                                                        color: '#595959'\r\n                                                    }}\r\n                                                >\r\n                                                    Clear\r\n                                                </Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    :\r\n                                    isfilterFollowerClicked === true ?\r\n                                        <section className=\"modal_section\">\r\n                                            <div className=\"modal_option\">\r\n                                                <div className=\"modal_title\">Followers Count</div>\r\n                                                <div>\r\n                                                    <div className=\"label_slider\">Minimum</div>\r\n                                                    <div style={{ display: 'flex', justifyContent: \"flex-end\" }}>\r\n                                                        <Select\r\n                                                            defaultValue={selectedOption}\r\n                                                            onChange={setSelectedOption}\r\n                                                            options={options}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <Slider\r\n                                                    value={minRangeFollowers}\r\n                                                    onChange={(e, data) => {\r\n                                                        setMinRangeFollowers(data)\r\n                                                        setSliderRolled(true);\r\n                                                    }}\r\n                                                    marks={megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange}\r\n                                                    min={0}\r\n                                                    max={100}\r\n                                                    step={1}\r\n                                                    scale={scale1}\r\n                                                    valueLabelFormat={numFormatter}\r\n                                                />\r\n                                                <div style={{ paddingTop: '2.25rem' }}>\r\n                                                    <div className=\"label_slider\">Maximum</div>\r\n                                                    <div style={{ display: 'flex', justifyContent: \"flex-end\" }}>\r\n                                                        <Select\r\n                                                            defaultValue={selectedOption1}\r\n                                                            onChange={setSelectedOption1}\r\n                                                            options={options1}\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <Slider\r\n                                                    value={maxRangeFollowers}\r\n                                                    onChange={(e, data) => {\r\n                                                        setMaxRangeFollowers(data)\r\n                                                        setSlider1Rolled(true);\r\n                                                    }}\r\n                                                    marks={megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange}\r\n                                                    min={0}\r\n                                                    max={100}\r\n                                                    step={1}\r\n                                                    scale={scale}\r\n                                                    valueLabelFormat={numFormatter}\r\n                                                />\r\n                                                {\r\n                                                    silderRolled === true ?\r\n                                                        <div className=\"followers_count_1\">Minimum Followers Count: {scale1(minRangeFollowers)}</div>\r\n                                                        :\r\n                                                        <div className=\"followers_count_1\">Minimum Followers Count: {minRangeFollowers}</div>\r\n                                                }\r\n                                                {\r\n                                                    sliderRolled1 === true ?\r\n                                                        <div className=\"followers_count\">Maximum Followers Count: {scale(maxRangeFollowers)}</div>\r\n                                                        :\r\n                                                        <div className=\"followers_count\">Maximum Followers Count: {maxRangeFollowers}</div>\r\n                                                }\r\n                                                <div style={{\r\n                                                    display: 'flex', justifyContent: 'space-between'\r\n                                                }}>\r\n                                                    <Button\r\n                                                        color=\"primary\"\r\n                                                        onClick={filterByFollowersRange}\r\n                                                    >\r\n                                                        Filter\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        color=\"primary\"\r\n                                                        onClick={handleFollowerFilterClicked}\r\n                                                        style={{\r\n                                                            background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                            fontWeight: 600,\r\n                                                            fontSize: '0.75rem',\r\n                                                            lineHeight: '1rem',\r\n                                                            textAlign: 'center',\r\n                                                            color: '#595959'\r\n                                                        }}\r\n                                                    >\r\n                                                        Clear\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                        : null\r\n                        }\r\n                        <div className=\"download_icon col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4\">\r\n                            <a\r\n                                href={`data:text/csv;charset=utf-8,${(csvData)}`}\r\n                                download=\"filename.csv\"\r\n                                onClick={handleDownloadData}\r\n                            >\r\n                                <AiOutlineDownload size={30} />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table_content\">\r\n                        <TableContainer component={Paper} className='table_paper'>\r\n                            <Table stickyHeader className=\"table_container\" >\r\n                                <TableHead className=\"table_head\">\r\n                                    <TableRow className=\"table_row\">\r\n                                        <TableCell className=\"table_head_value\">Instagram Profiles</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Followers</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Engagement</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Like</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Comment</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Reach</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">City</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Category</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Actions</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody className=\"table_body\">\r\n                                    {\r\n                                        (rowsPerPage > 0\r\n                                            ?\r\n                                            filterFollowerClicked === true ?\r\n                                                followersRangeBasedInfluencers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                :\r\n                                                filterErClicked === true ?\r\n                                                    erBasedInfluencers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                    :\r\n                                                    filterCategoryClicked === true ?\r\n                                                        categoryFilteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                        :\r\n                                                        showVerifiedInfluencers === true ?\r\n                                                            verifiedInfluencers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                            :\r\n                                                            influencersData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                            : influencersData\r\n                                        )\r\n                                            .map((data, index) => (\r\n                                                <>\r\n                                                    < TableRow key={index} className='table_row_body' >\r\n                                                        <TableCell component=\"th\" scope=\"row\" key={data.username} onClick={() => redirectProfile(data)} className=\"table_body_value_1\" >\r\n                                                            <div>{data.full_name}</div>\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                            {NFormatter(data.edge_followed_by.count)}\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                            {NFormatter(data.edge_owner_to_timeline_media['edges'][0].er)}\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                            {NFormatter(data.edge_owner_to_timeline_media['edges'][0].avg_likes)}\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                            {NFormatter(data.edge_owner_to_timeline_media['edges'][0].avg_comment)}\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                            {NFormatter(data.edge_felix_video_timeline['edges'][0].averageReelView)}\r\n                                                        </TableCell>\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">{data.city_name}</TableCell>\r\n                                                        {/* <TableCell className=\"table_body_value\" align=\"center\">{data.category_enum !== null ? data.category_enum.length > 10 ? (data.category_enum.substring(0, 15) + '...') : data.category_enum : null}</TableCell> */}\r\n                                                        <TableCell className=\"table_body_value\" align=\"center\">{data.category_enum !== null ? data.category_enum.split('_') : null}</TableCell>\r\n                                                        <TableCell className=\"table_body_value\" key={index}>\r\n                                                            <div className=\"btn_display\">\r\n                                                                <img id={data.id} src={CostIcon} onClick={(e) => { handleCostClicked(data) }} />\r\n                                                                {\r\n                                                                    costModalOpened === true ?\r\n                                                                        costUser === data.username ?\r\n                                                                            <div className='cost_modal'>\r\n                                                                                <div className='modal_title'>Check Cost </div>\r\n                                                                                <div className='modal_desc'>The estimated cost for the influencer is as follows,</div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Reel</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorReel.minTotalCost || data.costFactorReel.minTotalCost ?\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorReel.minTotalCost)} - Rs{NFormatter(data.costFactorReel.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorReel.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorReel.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Post</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorPosts.minTotalCost || data.costFactorPosts.minTotalCost ?\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorPosts.minTotalCost)} - Rs{NFormatter(data.costFactorPosts.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorPosts.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorPosts.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Story</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorStories.minTotalCost || data.costFactorStories.minTotalCost ?\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorStories.minTotalCost)} - Rs{NFormatter(data.costFactorStories.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorStories.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorStories.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Igtv</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorIgtv.minTotalCost || data.costFactorIgtv.minTotalCost ?\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorIgtv.minTotalCost)} - Rs{NFormatter(data.costFactorIgtv.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorIgtv.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorIgtv.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Swipeup Stories</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorSwipeUp.minTotalCost || data.costFactorSwipeUp.minTotalCost ?\r\n                                                                                            <div className='cost_value' style={{ paddingLeft: '1rem' }}>: Rs{NFormatter(data.costFactorSwipeUp.minTotalCost)} - Rs{NFormatter(data.costFactorSwipeUp.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorSwipeUp.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorSwipeUp.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='cost_box'>\r\n                                                                                    <div>Videos</div>\r\n                                                                                    {\r\n                                                                                        data.costFactorVideo.minTotalCost || data.costFactorVideo.minTotalCost ?\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorVideo.minTotalCost)} - Rs{NFormatter(data.costFactorVideo.maxTotalCost)}</div>\r\n                                                                                            :\r\n                                                                                            <div className='cost_value'>: Rs{NFormatter(data.costFactorVideo.influencerExactminTotalCost)} - Rs{NFormatter(data.costFactorVideo.influencerExactmaxTotalCost)}</div>\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                                <div className='modal_footer'>\r\n                                                                                    To check a more accurate estimate, please contact +91 98765 43210\r\n                                                                                </div>\r\n                                                                                <Button className='close_btn' onClick={handleCostClicked}>Close</Button>\r\n                                                                            </div>\r\n                                                                            : null\r\n                                                                        :\r\n                                                                        null\r\n                                                                }\r\n                                                                <img id={data.id} onClick={() => { handleAddToListTable(data) }} src={ListIcon} />\r\n                                                                {addToListTableClicked === true ?\r\n                                                                    [data].map((item) =>\r\n                                                                        item.username == rowClickedData ?\r\n                                                                            <section className=\"addList_section\" id={data.id}>\r\n                                                                                <div className=\"addList_option\">\r\n                                                                                    <div style={{ display: 'flex', justifyContent: 'flex-end' }} onClick={handleAddToListTable}><AiOutlineClose /></div>\r\n                                                                                    <div onClick={() => setNewPlanClicked(true)} className='section_dropdown_header'>Add To List</div>\r\n                                                                                    <div className=\"section_list_title\">\r\n                                                                                        Select the list to which you want to add the\r\n                                                                                        influencer.\r\n                                                                                    </div>\r\n                                                                                    <div style={{ overflowY: 'scroll', height: '20vh', padding: '0.75rem' }}>\r\n                                                                                        {listData.map((item) =>\r\n                                                                                            <div className=\"list_options\" onClick={() => { addInfluencerToList(data, item) }}>\r\n                                                                                                {item.listName}\r\n                                                                                            </div>\r\n                                                                                        )}\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </section>\r\n                                                                            : null\r\n                                                                    )\r\n\r\n                                                                    : null}\r\n                                                                <img id={data.id} onClick={() => handleAddToCompare(data)} src={CompareIcon} />\r\n                                                                {\r\n                                                                    addToCompareClicked === true ?\r\n\r\n                                                                        [data].map((item) =>\r\n                                                                            <div className=\"compare_section\">\r\n                                                                                <div className=\"close_btn\"><AiOutlineClose onClick={() => handleAddToCompare()} /></div>\r\n                                                                                <div className=\"compare_headers\">\r\n                                                                                    Add to Compare\r\n                                                                                </div>\r\n                                                                                <div className=\"compare_title\">\r\n                                                                                    Select the influencer(s) from results to\r\n                                                                                    add to the selection you want to compare. You may\r\n                                                                                    compare upto four influencers.\r\n                                                                                </div>\r\n                                                                                <input\r\n                                                                                    type=\"text\"\r\n                                                                                    value={value}\r\n                                                                                    onChange={handleChange}\r\n                                                                                    className=\"compare_input\"\r\n                                                                                />\r\n                                                                                {suggestionsActive && <Suggestions />}\r\n                                                                                <div className=\"influencers_box\">\r\n                                                                                    <div style={{ overflowY: 'scroll', height: '20vh' }}>\r\n                                                                                        {\r\n                                                                                            addToCompareData.length > 0 ?\r\n                                                                                                <>\r\n                                                                                                    {/* <div className=\"added_influencer\">\r\n                                                                                                                {addToCompareData[0].username} <span><AiOutlineClose onClick={() => { setAddToCompareData([]) }} /></span>\r\n                                                                                                            </div> */}\r\n                                                                                                    {\r\n                                                                                                        addToCompareData.map((data) =>\r\n                                                                                                            <div className=\"added_influencer\">\r\n                                                                                                                {data.username}<span><AiOutlineClose onClick={() => { handleRemoveInfluencer(data) }} /></span>\r\n                                                                                                            </div>\r\n                                                                                                        )\r\n                                                                                                    }\r\n                                                                                                </>\r\n                                                                                                : null\r\n                                                                                        }\r\n                                                                                    </div>\r\n                                                                                    <div onClick={() => setAddToCompareData([])} className=\"clear_all\">\r\n                                                                                        Clear all\r\n                                                                                    </div>\r\n                                                                                    <div className=\"btn_pane\">\r\n                                                                                        <Button onClick={handleCompareInfluencers} className='compare_btn'>\r\n                                                                                            Compare Now\r\n                                                                                        </Button>\r\n                                                                                        <Button className=\"clear_btn\">\r\n                                                                                            Compare Later\r\n                                                                                        </Button>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        )\r\n                                                                        : null\r\n                                                                }\r\n                                                            </div>\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n\r\n                                                </>\r\n                                            ))\r\n                                    }\r\n                                </TableBody>\r\n                                <TableFooter>\r\n                                    <TableRow>\r\n                                        <TablePagination\r\n                                            rowsPerPageOptions={[7, 14, { label: 'All', value: -1 }]}\r\n                                            colSpan={3}\r\n                                            count={showVerifiedInfluencers === true ? verifiedInfluencers.length : filterErClicked === true ? erBasedInfluencers.length : filterCategoryClicked === true ? categoryFilteredData.length : filterFollowerClicked === true ? followersRangeBasedInfluencers.length : influencersData.length}\r\n                                            rowsPerPage={rowsPerPage}\r\n                                            page={page}\r\n                                            SelectProps={{\r\n                                                inputProps: {\r\n                                                    'aria-label': 'Results per page',\r\n                                                },\r\n                                                native: true,\r\n                                            }}\r\n                                            onPageChange={handleChangePage}\r\n                                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                            ActionsComponent={TablePaginationActions}\r\n                                        />\r\n                                        {/* <BiFirstPage size={30} onClick={handleChangePageToFirst} className='pointer' />\r\n                                            <BiLastPage size={30} className='pointer' /> */}\r\n                                    </TableRow>\r\n                                </TableFooter>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default InfluencersList"],"names":["num","toFixed","replace","userId","localStorage","getItem","SidebarData","title","path","icon","cName","useState","sidebar","value","color","className","src","logo","map","item","index","to","showDropDownSelected","setShowDropdownSelected","comparedPageVisited","setComparedPageVisited","userName","navigate","useNavigate","location","useLocation","params","useParams","textToShow","page","text","find","el","pathname","includes","useEffect","style","display","paddingTop","paddingLeft","alignItems","marginRight","cursor","onClick","clear","options","label","options1","influencersData","setInfluencersData","setPage","rowsPerPage","setRowsPerPage","showVerifiedInfluencers","setShowVerifiedInfluencers","verifiedInfluencers","setVerifiedInfluencers","category","setCategory","erBasedInfluencers","followersRangeBasedInfluencers","isfilterFollowerClicked","setIsFilterFollowerClicked","isfilterCategoryClicked","setIsFilterCategoryClicked","isfilterErClicked","setIsFilterErClicked","filterFollowerClicked","setFilterFollowerClicked","filterCategoryClicked","setFilterCategoryClicked","filterErClicked","setFilterErClicked","newPlanClicked","setNewPlanClicked","listData","setListData","addToListTableClicked","setAddToListTableClicked","rowClickedData","setRowClickedData","addToCompareClicked","setAddToCompareClicked","addToCompareData","setAddToCompareData","setInfluencer","setAutoSuggestedData","csvData","setCsvData","suggestions","setSuggestions","suggestionIndex","suggestionsActive","setSuggestionsActive","setValue","minRangeFollowers","setMinRangeFollowers","maxRangeFollowers","setMaxRangeFollowers","rangeEr","setRangeEr","silderRolled","setSliderRolled","setSliderErRolled","sliderRolled1","setSlider1Rolled","inputValue","setInputValue","redirectedResult","setRedirectedResult","suggestionsForInputActive","setSuggestionsForInputActive","suggestions1","setSuggestions1","costModalOpened","setCostModalOpened","costUser","setCostUser","allFilterCleared","setAllFilterCleared","nanoClicked","setNanoClicked","microClicked","setMicroClicked","midTierClicked","setMidTierClicked","macroClicked","setMacroClicked","megaClicked","setMegaClicked","nanoMaxClicked","setNanoMaxClicked","microMaxClicked","setMicroMaxClicked","midTierMaxClicked","setMidTierMaxClicked","macroMaxClicked","setMacroMaxClicked","megaMaxClicked","setMegaMaxClicked","selectedOption","setSelectedOption","selectedOption1","setSelectedOption1","categoryFilteredData","setCategoryFilteredData","inputField","eRange","followerRange","autoSuggestedArray","handleFollowerFilterClicked","handleCategoryFilterClicked","handleErFilterClicked","scale","previousMarkIndex","Math","floor","previousMark","megaRange","macroRange","midTierRange","microRange","nanoRange","followersRange","remainder","scaledValue","scale1","previousMarkIndex1","previousMark1","numFormatter","getListData","url","fetch","then","data","json","result","handleCostClicked","e","username","fetchProfiles","splitArray","splitFollArray","split","res","catch","err","console","log","push","handleAddToListTable","handleAddToCompare","handleChange","query","target","toLowerCase","length","handleClick","innerText","Suggestions","suggestion","handleCompareInfluencers","string","concat","substring","handleInfluencerClick","SuggestionsInfluencer","margin","padding","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","TopBar","type","placeholder","onChange","Button","variant","arr","forEach","is_verified","Slider","marks","min","max","step","justifyContent","splitFollArr","background","borderRadius","textAlign","array","category_enum","toUpperCase","defaultValue","valueLabelFormat","href","download","headers","size","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","slice","scope","redirectProfile","full_name","NFormatter","edge_followed_by","count","edge_owner_to_timeline_media","er","avg_likes","avg_comment","edge_felix_video_timeline","averageReelView","city_name","id","CostIcon","costFactorReel","minTotalCost","maxTotalCost","influencerExactminTotalCost","influencerExactmaxTotalCost","costFactorPosts","costFactorStories","costFactorIgtv","costFactorSwipeUp","costFactorVideo","ListIcon","overflowY","height","listName","method","addInfluencerToList","CompareIcon","current","filter","handleRemoveInfluencer","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","onPageChange","event","newPage","onRowsPerPageChange","parseInt","ActionsComponent","IconButton","disabled","FirstPage","KeyboardArrowLeft","ceil","KeyboardArrowRight","LastPage"],"sourceRoot":""}