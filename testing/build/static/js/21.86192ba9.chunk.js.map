{"version":3,"file":"static/js/21.86192ba9.chunk.js","mappings":"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","sources":["Common/Loader/index.js","Common/NumberFormatter/numFormatter.js","Common/Sidebar/sidebardata.js","Common/Sidebar/sidebar.js","Common/TopBar/index.js","Components/SearchResults/influencerlists.js"],"sourcesContent":["import React from \"react\";\r\nimport '../Loader/index.scss';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\nexport default Loader;","function NFormatter(num) {\r\n    if (num >= 1000000000) {\r\n        return (num / 1000000000).toFixed(1).replace(/\\.0$/, '') + 'G';\r\n    }\r\n    if (num >= 1000000) {\r\n        return (num / 1000000).toFixed(1).replace(/\\.0$/, '') + 'M';\r\n    }\r\n    if (num >= 1000) {\r\n        return (num / 1000).toFixed(1).replace(/\\.0$/, '') + 'K';\r\n    }\r\n    return num;\r\n}\r\n\r\nexport default NFormatter;","import React, { useEffect } from \"react\";\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as MdIcons from 'react-icons/md';\r\nconst userId = localStorage.getItem('id');\r\nexport const SidebarData = [\r\n\r\n    {\r\n        title: 'Home',\r\n        path: `/home/${userId}`,\r\n        icon: <AiIcons.AiFillHome />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Compare',\r\n        icon: <MdIcons.MdCompare />,\r\n        path: \"/CompareInfluencers\",\r\n        cName: 'nav-text',\r\n        // children: [\r\n        //     {\r\n        //         title: \"Influencers\",\r\n        //         cName: 'nav-nested',\r\n        //     },\r\n        //     {\r\n        //         title: \"Lists\",\r\n        //         path: \"/CompareLists\",\r\n        //         cName: 'nav-nested',\r\n        //     }\r\n        // ]\r\n    },\r\n    {\r\n        title: 'Calculator',\r\n        path: '/calculate',\r\n        icon: <AiIcons.AiFillCalculator />,\r\n        cName: 'nav-text'\r\n    },\r\n]","import React, { useState, useEffect } from \"react\";\r\nimport './sidebar.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { SidebarData } from \"./sidebardata\";\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport { IconContext } from \"react-icons/lib\";\r\nimport { AiFillCaretDown } from 'react-icons/ai';\r\nimport { AiFillCaretRight } from 'react-icons/ai';\r\nimport logo from '../../Assets/Images/logo.png';\r\n\r\nfunction Navbar() {\r\n    const [sidebar, setSidebar] = useState(false);\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n\r\n    const showSidebar = () => {\r\n        if (isMobile) {\r\n            setSidebar(true)\r\n        }\r\n        else if (!isMobile) {\r\n            setSidebar(false)\r\n        }\r\n    }\r\n\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        showSidebar()\r\n    }, [width])\r\n\r\n    const isMobile = width <= 700;\r\n\r\n    return (\r\n        <IconContext.Provider value={{ color: '#fff' }}>\r\n            <div className={sidebar ? 'nav-menu' : 'nav-menu-active'}>\r\n                <nav className=\"navbar\">\r\n                    {/* <div className={sidebar ? 'navbar-inactive' : 'navbar'} >\r\n                        <Link to='#' className='menu-bars'>\r\n                            <FaIcons.FaBars onClick={showSidebar} />\r\n                        </Link>\r\n                    </div> */}\r\n                    <img src={logo} className={isMobile ? 'logo_hide' : 'logo'} />\r\n                    <ul className=\"nav-menu-items\">\r\n                        {\r\n                            SidebarData.map((item, index) => {\r\n                                return (\r\n                                    <li className={item.cName}>\r\n                                        {\r\n                                            sidebar === true ?\r\n                                                <Link to={item.path}>\r\n                                                    {item.icon}\r\n                                                </Link>\r\n                                                :\r\n                                                <Link to={item.path}>\r\n                                                    {item.icon}\r\n                                                    <span\r\n                                                    >{item.title}</span>\r\n                                                </Link>\r\n                                        }\r\n\r\n                                    </li>\r\n                                );\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </nav>\r\n            </div >\r\n        </IconContext.Provider >\r\n    )\r\n}\r\nexport default Navbar;","import React, { useState, useEffect } from \"react\";\r\nimport './index.scss';\r\nimport help from '../../Assets/Images/help.png';\r\nimport { MdOutlineArrowDropDown } from 'react-icons/md';\r\nimport { useNavigate, Link, useLocation, useParams } from 'react-router-dom';\r\nimport UserIcon from '../../Assets/Images/userIcon.png';\r\n\r\nfunction TopBar() {\r\n\r\n    const [showDropDownSelected, setShowDropdownSelected] = useState(false);\r\n    const [comparedPageVisited, setComparedPageVisited] = useState(false);\r\n    const userId = localStorage.getItem('id');\r\n    const userName = localStorage.getItem('name');\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n    const params = useParams()\r\n\r\n    let TOPBAR_TEXTS = [{ page: `/home/${userId}`, text: \"Home\" }, { page: \"/CompareLists\", text: \"Compare Lists\" }, { page: \"/CompareInfluencers\", text: \"Compare Influencers\" }, { page: \"/influencerslist/\", text: \"Search Results\" }, { page: \"/basketInfluencers\", text: \"Influencer Bundle\" }, { page: \"/userLists\", text: \"List\" }, { page: \"/profile\", text: \"Influencer Profile\" }, { page: `/updateprofile/${userId}`, text: \"Profile Settings\" }, { page: `/calculate`, text: \"Calculate Cost\" }]\r\n    let textToShow = TOPBAR_TEXTS.find(el => location.pathname.includes(el.page))?.text\r\n\r\n    const checkPage = () => {\r\n        {\r\n            textToShow === 'Compare Influencers' || textToShow === 'Compare Lists' ?\r\n                setComparedPageVisited(true)\r\n                :\r\n                setComparedPageVisited(false)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        checkPage();\r\n    },[params])\r\n\r\n    const handleShowProfileDropdown = () => {\r\n        let data = showDropDownSelected ? false : true;\r\n        setShowDropdownSelected(data)\r\n    }\r\n\r\n    const handleRedirectToProfileSettings = () => {\r\n        navigate(`/updateprofile/${userId}`)\r\n    }\r\n\r\n    const handleRedireactToAbout = () => {\r\n        navigate(`/about`)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        <Link to='/' />\r\n        localStorage.clear();\r\n        // let url = `http://65.0.110.147:4000/logout`;\r\n        // fetch((url), {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         'Content-type': 'application/json; charset=UTF-8',\r\n        //     }\r\n        // })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"topbar\">\r\n                <div className={comparedPageVisited === true ? \"page_title_compared\" : \"page_title\"}>\r\n                    {textToShow}\r\n                    {textToShow === 'Compare Influencers' || textToShow === 'Compare Lists' ?\r\n                        <div style={{ display: 'flex', paddingTop: '1rem' }}>\r\n                            <div style={{ paddingLeft: '1.25rem' }}>\r\n                                <Link to=\"/CompareInfluencers\" className=\"tab_text\">Influencers</Link>\r\n                            </div>\r\n                            <div style={{ paddingLeft: '3.5rem' }}>\r\n                                <Link to=\"/CompareLists\" className=\"tab_text\">List</Link>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                    <span className=\"topbar_help_icon\"><img src={help} /></span>\r\n                    <img src={UserIcon} className=\"topbar_user_icon\" />\r\n                    <span className=\"topbar_username\">{userName}</span>\r\n                    <span style={{ marginRight: '4rem', cursor: 'pointer' }}><MdOutlineArrowDropDown onClick={handleShowProfileDropdown} /></span>\r\n                </div>\r\n            </div>\r\n            {\r\n                showDropDownSelected === true ?\r\n                    <div className=\"dropdown\">\r\n                        <div onClick={handleRedirectToProfileSettings} className=\"dropdown_title\">Profile Settings</div>\r\n                        <div onClick={handleRedireactToAbout} className=\"dropdown_title\">About</div>\r\n                        <div onClick={handleLogout} className=\"dropdown_title\"><Link to='/'>Logout</Link></div>\r\n                    </div>\r\n                    : null\r\n            }\r\n        </>\r\n    )\r\n}\r\nexport default TopBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport NFormatter from \"../../Common/NumberFormatter/numFormatter\";\r\nimport './influencerlists.scss';\r\nimport Navbar from \"../../Common/Sidebar/sidebar\";\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Button from '@mui/material/Button';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport { Input } from \"reactstrap\";\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { AiFillCaretDown, AiOutlineDownload, AiOutlineClose } from 'react-icons/ai';\r\nimport { MdOutlineArrowDropUp, MdDelete } from 'react-icons/md';\r\nimport { BiFirstPage } from 'react-icons/bi';\r\nimport { BiLastPage } from 'react-icons/bi';\r\nimport moment from \"moment\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport TopBar from '../../Common/TopBar/index';\r\nimport ListIcon from '../../Assets/Images/listicon.png';\r\nimport CostIcon from '../../Assets/Images/costicon.png';\r\nimport CompareIcon from '../../Assets/Images/compareicon.png';\r\nimport Slider from '@mui/material/Slider';\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport Select from 'react-select';\r\nimport Loader from '../../Common/Loader/index';\r\nconst options = [\r\n    { value: 'Nano(1K-10K Followers)', label: 'Nano(1K-10K Followers)' },\r\n    { value: 'Micro(10K-50K Followers)', label: 'Micro(10K-50K Followers)' },\r\n    { value: 'Mid-Tier(50K-100K Followers)', label: 'Mid-Tier(50K-100K Followers)' },\r\n    { value: 'Macro(100K-1M Followers)', label: 'Macro(100K-1M Followers)' },\r\n    { value: 'Mega(1M + Followers)', label: 'Mega(1M + Followers)' },\r\n];\r\nconst options1 = [\r\n    { value: 'Nano(1K-10K Followers)', label: 'Nano(1K-10K Followers)' },\r\n    { value: 'Micro(10K-50K Followers)', label: 'Micro(10K-50K Followers)' },\r\n    { value: 'Mid-Tier(50K-100K Followers)', label: 'Mid-Tier(50K-100K Followers)' },\r\n    { value: 'Macro(100K-1M Followers)', label: 'Macro(100K-1M Followers)' },\r\n    { value: 'Mega(1M + Followers)', label: 'Mega(1M + Followers)' },\r\n];\r\n\r\nconst InfluencersList = () => {\r\n\r\n    const [influencersData, setInfluencersData] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(7);\r\n    const [showVerifiedInfluencers, setShowVerifiedInfluencers] = useState(false);\r\n    const [verifiedInfluencers, setVerifiedInfluencers] = useState([]);\r\n    const [category, setCategory] = useState('');\r\n    const [categoryBasedInfluencers, setCategoryBasedInfluencers] = useState([]);\r\n    const [erBasedInfluencers, setErBasedInfluencers] = useState([]);\r\n    const [followersRangeBasedInfluencers, setFollowersRangeBasedInfluencers] = useState([]);\r\n    const [isfilterFollowerClicked, setIsFilterFollowerClicked] = useState(false);\r\n    const [isfilterCategoryClicked, setIsFilterCategoryClicked] = useState(false);\r\n    const [isfilterErClicked, setIsFilterErClicked] = useState(false);\r\n    const [filterFollowerClicked, setFilterFollowerClicked] = useState(false);\r\n    const [filterCategoryClicked, setFilterCategoryClicked] = useState(false);\r\n    const [filterErClicked, setFilterErClicked] = useState(false);\r\n    const [newPlanClicked, setNewPlanClicked] = useState(false);\r\n    // const [listName, setListName] = useState('');\r\n    // const [brandName, setBrandName] = useState('');\r\n    const [listData, setListData] = useState([]);\r\n    const [addToListTableClicked, setAddToListTableClicked] = useState(false);\r\n    const [listInfluencerDetails, setListInfluencerDetails] = useState([]);\r\n    const [listClicked, setListClicked] = useState(false);\r\n    const [listInfluencersData, setListInfluencersData] = useState([]);\r\n    const [rowClickedData, setRowClickedData] = useState('');\r\n    const [addToCompareClicked, setAddToCompareClicked] = useState(false);\r\n    const [addToCompareData, setAddToCompareData] = useState([]);\r\n    const [influencer, setInfluencer] = useState([]);\r\n    const [removeInfluencerClicked, setRemoveInfluencerClicked] = useState(false);\r\n    const [autoSuggestedData, setAutoSuggestedData] = useState([]);\r\n    const [csvData, setCsvData] = useState('');\r\n\r\n    const [suggestions, setSuggestions] = useState([]);\r\n    const [suggestionIndex, setSuggestionIndex] = useState(0);\r\n    const [suggestionsActive, setSuggestionsActive] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const [minRangeFollowers, setMinRangeFollowers] = useState(1000)\r\n    const [maxRangeFollowers, setMaxRangeFollowers] = useState(10000)\r\n    const [rangeEr, setRangeEr] = useState([0, 20]);\r\n    const [silderRolled, setSliderRolled] = useState(false);\r\n    const [silderErRolled, setSliderErRolled] = useState(false);\r\n    const [sliderRolled1, setSlider1Rolled] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [redirectedResult, setRedirectedResult] = useState(false);\r\n    const [suggestionsForInputActive, setSuggestionsForInputActive] = useState(false);\r\n    const [suggestions1, setSuggestions1] = useState([]);\r\n    const [costModalOpened, setCostModalOpened] = useState(false);\r\n    const [costUser, setCostUser] = useState('');\r\n    const [allFilterCleared, setAllFilterCleared] = useState(false);\r\n\r\n    const [nanoClicked, setNanoClicked] = useState(false);\r\n    const [microClicked, setMicroClicked] = useState(false);\r\n    const [midTierClicked, setMidTierClicked] = useState(false);\r\n    const [macroClicked, setMacroClicked] = useState(false);\r\n    const [megaClicked, setMegaClicked] = useState(false);\r\n    const [nanoMaxClicked, setNanoMaxClicked] = useState(false);\r\n    const [microMaxClicked, setMicroMaxClicked] = useState(false);\r\n    const [midTierMaxClicked, setMidTierMaxClicked] = useState(false);\r\n    const [macroMaxClicked, setMacroMaxClicked] = useState(false);\r\n    const [megaMaxClicked, setMegaMaxClicked] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState(null);\r\n    const [selectedOption1, setSelectedOption1] = useState(null);\r\n    const [categoryFilteredData, setCategoryFilteredData] = useState([])\r\n    const [offset, setOffset] = useState(0);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    const [totalDataLength, setTotalDataLength] = useState(0);\r\n\r\n    let { inputField, eRange, followerRange } = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const userId = localStorage.getItem('id');\r\n    let autoSuggestedArray = [];\r\n\r\n    // const handleChangePage = (event, newPage) => {\r\n    //     setPage(newPage);\r\n    // };\r\n\r\n    // const handleChangeRowsPerPage = (event) => {\r\n    //     setRowsPerPage(parseInt(event.target.value, 10));\r\n    //     setPage(0);\r\n    // };\r\n\r\n    const showVerified = () => {\r\n        const data = showVerifiedInfluencers ? false : true;\r\n        setShowVerifiedInfluencers(data);\r\n        let arr = [];\r\n        influencersData.forEach((data) => {\r\n            console.log(data);\r\n            if (data.is_verified === true) {\r\n                arr.push(data)\r\n                setVerifiedInfluencers(arr)\r\n            }\r\n        })\r\n    }\r\n\r\n    const redirectProfile = (data) => {\r\n        navigate(`/profile/${data.username}`)\r\n    }\r\n\r\n    const handleFollowerFilterClicked = () => {\r\n        setIsFilterFollowerClicked(value => !value)\r\n    };\r\n\r\n    const handleCategoryFilterClicked = () => setIsFilterCategoryClicked(value => !value);\r\n\r\n    const handleErFilterClicked = () => setIsFilterErClicked(value => !value);\r\n\r\n    const scale = value => {\r\n        const previousMarkIndex = Math.floor(value / 25);\r\n        const previousMark = (megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange)[previousMarkIndex];\r\n        const remainder = value % 25;\r\n        if (remainder === 0) {\r\n            return previousMark.scaledValue;\r\n        }\r\n        const nextMark = (megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange)[previousMarkIndex + 1];\r\n        const increment = (nextMark.scaledValue - previousMark.scaledValue) / 25;\r\n        return remainder * increment + previousMark.scaledValue;\r\n    };\r\n\r\n    const scale1 = value => {\r\n        const previousMarkIndex1 = Math.floor(value / 25);\r\n        const previousMark1 = (megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange)[previousMarkIndex1];\r\n        const remainder = value % 25;\r\n        if (remainder === 0) {\r\n            return previousMark1.scaledValue;\r\n        }\r\n        const nextMark = (megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange)[previousMarkIndex1 + 1];\r\n        const increment = (nextMark.scaledValue - previousMark1.scaledValue) / 25;\r\n        return remainder * increment + previousMark1.scaledValue;\r\n    };\r\n\r\n    const nanoRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000,\r\n            label: \"1k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 2500,\r\n            label: \"2.5k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 5000,\r\n            label: \"5k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 7500,\r\n            label: \"7.5k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        }\r\n    ];\r\n\r\n    const midTierRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 60000,\r\n            label: \"60k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 75000,\r\n            label: \"75k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 90000,\r\n            label: \"90k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        }\r\n    ];\r\n\r\n    const macroRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 250000,\r\n            label: \"250k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 500000,\r\n            label: \"500k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 750000,\r\n            label: \"750k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 1000000,\r\n            label: \"1M\"\r\n        }\r\n    ];\r\n\r\n    const megaRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000000,\r\n            label: \"1M+\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 2500000,\r\n            label: \"2.5M+\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 5000000,\r\n            label: \"5M+\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 7500000,\r\n            label: \"7.5M+\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 10000000,\r\n            label: \"10M+\"\r\n        }\r\n    ]\r\n\r\n    const microRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 20000,\r\n            label: \"20k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 30000,\r\n            label: \"30k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 40000,\r\n            label: \"40k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        }\r\n    ];\r\n\r\n    const followersRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 1000,\r\n            label: \"1k\"\r\n        },\r\n        {\r\n            value: 25,\r\n            scaledValue: 5000,\r\n            label: \"5k\"\r\n        },\r\n        {\r\n            value: 50,\r\n            scaledValue: 10000,\r\n            label: \"10k\"\r\n        },\r\n        {\r\n            value: 75,\r\n            scaledValue: 25000,\r\n            label: \"25k\"\r\n        },\r\n        {\r\n            value: 100,\r\n            scaledValue: 50000,\r\n            label: \"50k\"\r\n        },\r\n        {\r\n            value: 125,\r\n            scaledValue: 100000,\r\n            label: \"100k\"\r\n        },\r\n        {\r\n            value: 150,\r\n            scaledValue: 250000,\r\n            label: \"250k\"\r\n        },\r\n        {\r\n            value: 175,\r\n            scaledValue: 500000,\r\n            label: \"500k\"\r\n        },\r\n        {\r\n            value: 200,\r\n            scaledValue: 1000000,\r\n            label: \"1M\"\r\n        }\r\n    ];\r\n\r\n    const ErRange = [\r\n        {\r\n            value: 0,\r\n            scaledValue: 0,\r\n            label: \"0\"\r\n        },\r\n        {\r\n            value: 5,\r\n            scaledValue: 5,\r\n            label: \"5\"\r\n        },\r\n        {\r\n            value: 10,\r\n            scaledValue: 10,\r\n            label: \"10\"\r\n        },\r\n        {\r\n            value: 15,\r\n            scaledValue: 15,\r\n            label: \"15\"\r\n        },\r\n        {\r\n            value: 20,\r\n            scaledValue: 20,\r\n            label: \"20\"\r\n        }\r\n    ];\r\n\r\n    function numFormatter(num) {\r\n        if (num > 999 && num < 1000000) {\r\n            return (num / 1000).toFixed(0) + \"K\"; // convert to K for number from > 1000 < 1 million\r\n        } else if (num >= 1000000) {\r\n            return (num / 1000000).toFixed(0) + \"M\"; // convert to M for number from > 1 million\r\n        } else if (num < 900) {\r\n            return num; // if value < 1000, nothing to do\r\n        }\r\n    }\r\n\r\n    const filterCategory = () => {\r\n        let array = [];\r\n        setIsFilterCategoryClicked(false);\r\n        influencersData.forEach((data) => {\r\n            if (data.category_enum !== null) {\r\n                if (data.category_enum.includes(category.toUpperCase())) {\r\n                    array.push(data)\r\n                    setCategoryFilteredData(array)\r\n                    setFilterCategoryClicked(true)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const filterByFollowersRange = () => {\r\n        let splitFoll;\r\n        let splitFollArr;\r\n        setIsFilterFollowerClicked(false);\r\n        if (!inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist//eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    navigate(`/influencerslist//followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = eRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist//eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist//followerRange=${scale1(minRangeFollowers)}&${scale(maxRangeFollowers)}`)\r\n            }\r\n        }\r\n        else if (inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist/${inputField}/eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    navigate(`/influencerslist/${inputField}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = eRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist/${inputField}/eRange=${splitFollArr[0]}&${splitFollArr[1]}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist/${inputField}/followerRange=${scale1(minRangeFollowers)}&${[scale(maxRangeFollowers)]}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const filterByErRange = () => {\r\n        let splitFoll;\r\n        let splitFollArr;\r\n        setIsFilterErClicked(false);\r\n        if (!inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = followerRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                console.log(rangeEr[0], rangeEr[1]);\r\n                navigate(`/influencerslist//eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n            }\r\n        }\r\n        else if (inputField) {\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n                }\r\n                else if (eRange.includes('followerRange')) {\r\n                    splitFoll = eRange.split('=');\r\n                    splitFollArr = splitFoll[1].split('&');\r\n                    navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`)\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                splitFoll = followerRange.split('=')\r\n                splitFollArr = splitFoll[1].split('&')\r\n                navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}/followerRange=${splitFollArr[0]}&${splitFollArr[1]}`);\r\n            }\r\n            else if (!eRange && !followerRange) {\r\n                navigate(`/influencerslist/${inputField}/eRange=${rangeEr[0]}&${rangeEr[1]}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getListData = () => {\r\n        const url = `http://65.0.110.147:4000/getListData/${userId}`;\r\n        fetch(url)\r\n            .then((data) => {\r\n                data.json()\r\n                    .then((result) => {\r\n                        setListData(result)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const handleDownloadData = () => {\r\n        const url = `http://65.0.110.147:4000/downloadcsv?inputField=${inputField}`;\r\n        fetch((url), {\r\n            headers: {\r\n                'Content-type': 'text/csv; charset=UTF-8',\r\n            }\r\n        })\r\n            .then((res) => {\r\n                res.text()\r\n                    .then((data) => {\r\n                        setCsvData(data)\r\n                    })\r\n            })\r\n    }\r\n\r\n    const handleCostClicked = (e) => {\r\n        setCostUser(e.username)\r\n        let data = costModalOpened ? false : true;\r\n        setCostModalOpened(data)\r\n    }\r\n\r\n    const handleClearAllFilters = () => {\r\n        setFilterCategoryClicked(false);\r\n        setFilterErClicked(false);\r\n        setFilterFollowerClicked(false);\r\n        setAllFilterCleared(!allFilterCleared)\r\n        setShowVerifiedInfluencers(false)\r\n        navigate(`/influencerslist/${inputField}`)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     fetchProfiles();\r\n    //     getListData();\r\n    // }, []);    \r\n\r\n    const fetchProfiles = () => {\r\n        let str = '';\r\n        let follString = '';\r\n        let splitArray;\r\n        let splitFollArray;\r\n        if (inputField === undefined) {\r\n            inputField = '';\r\n            if (eRange && !followerRange) {\r\n                if (eRange.includes('eRange')) {\r\n                    str = eRange.split('=');\r\n                    splitArray = str[1].split('&');\r\n                    const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n                    fetch(url)\r\n                        .then((data) => {\r\n                            data.json()\r\n                                .then((res) => {\r\n                                    setInfluencersData(res.result)\r\n                                    setTotalPages(res.totalPages)\r\n                                    setTotalDataLength(res.totalDataLength)\r\n                                })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err)\r\n                        })\r\n                }\r\n                if (eRange.includes('followerRange')) {\r\n                    follString = eRange.split('=')\r\n                    splitFollArray = follString[1].split('&')\r\n                    const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}`;\r\n                    fetch(url)\r\n                        .then((data) => {\r\n                            data.json()\r\n                                .then((res) => {\r\n                                    setInfluencersData(res.result)\r\n                                    setTotalPages(res.totalPages)\r\n                                    setTotalDataLength(res.totalDataLength)\r\n                                })\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err)\r\n                        })\r\n                }\r\n            }\r\n            if (eRange && followerRange) {\r\n                str = eRange.split('=');\r\n                splitArray = str[1].split('&');\r\n                follString = followerRange.split('=')\r\n                splitFollArray = follString[1].split('&')\r\n                const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res.result)\r\n                                setTotalPages(res.totalPages)\r\n                                setTotalDataLength(res.totalDataLength)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n            if (!eRange && !followerRange) {\r\n                const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res.result)\r\n                                setTotalPages(res.totalPages)\r\n                                setTotalDataLength(res.totalDataLength)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n        }\r\n        if (eRange && !followerRange) {\r\n            if (eRange.includes('eRange')) {\r\n                str = eRange.split('=');\r\n                splitArray = str[1].split('&');\r\n                const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res.result)\r\n                                setTotalPages(res.totalPages)\r\n                                setTotalDataLength(res.totalDataLength)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n            if (eRange.includes('followerRange')) {\r\n                follString = eRange.split('=')\r\n                splitFollArray = follString[1].split('&')\r\n                const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}`;\r\n                fetch(url)\r\n                    .then((data) => {\r\n                        data.json()\r\n                            .then((res) => {\r\n                                setInfluencersData(res.result)\r\n                                setTotalPages(res.totalPages)\r\n                                setTotalDataLength(res.totalDataLength)\r\n                            })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err)\r\n                    })\r\n            }\r\n        }\r\n        if (eRange && followerRange) {\r\n            str = eRange.split('=');\r\n            splitArray = str[1].split('&');\r\n            follString = followerRange.split('=')\r\n            splitFollArray = follString[1].split('&')\r\n            const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}&minFollowers=${splitFollArray[0]}&maxFollowers=${splitFollArray[1]}&minEr=${splitArray[0]}&maxEr=${splitArray[1]}`;\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setInfluencersData(res.result)\r\n                            setTotalPages(res.totalPages)\r\n                            setTotalDataLength(res.totalDataLength)\r\n                        })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n        if (!eRange && !followerRange) {\r\n            const url = `http://65.0.110.147:4000/getFilteredResults?inputField=${inputField}&limit=${rowsPerPage}&skip=${offset}`;\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setInfluencersData(res.result)\r\n                            setTotalPages(res.totalPages)\r\n                            setTotalDataLength(res.totalDataLength)\r\n                        })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n        getListData();\r\n        handleDownloadData();\r\n    }, [redirectedResult, offset]);\r\n\r\n    useEffect(() => {\r\n        getListData();\r\n    }, [newPlanClicked]);\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [allFilterCleared]);\r\n\r\n    useEffect(() => {\r\n        if (selectedOption !== null) {\r\n            if (selectedOption.label.includes('Mega(1M + Followers)')) {\r\n                setMegaClicked(true);\r\n                setMicroClicked(false);\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Macro(100K-1M Followers)')) {\r\n                setMacroClicked(true);\r\n                setMicroClicked(false);\r\n                setMidTierClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Mid-Tier(50K-100K Followers)')) {\r\n                setMidTierClicked(true)\r\n                setMicroClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Micro(10K-50K Followers)')) {\r\n                setMicroClicked(true)\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setNanoClicked(false);\r\n            }\r\n            else if (selectedOption.label.includes('Nano(1K-10K Followers)')) {\r\n                setNanoClicked(true)\r\n                setMidTierClicked(false);\r\n                setMacroClicked(false);\r\n                setMegaClicked(false);\r\n                setMicroClicked(false);\r\n            }\r\n        }\r\n    }, [selectedOption])\r\n\r\n    useEffect(() => {\r\n        if (selectedOption1 !== null) {\r\n            if (selectedOption1.label.includes('Mega(1M + Followers)')) {\r\n                setMegaMaxClicked(true);\r\n                setMicroMaxClicked(false);\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Macro(100K-1M Followers)')) {\r\n                setMacroMaxClicked(true);\r\n                setMicroMaxClicked(false);\r\n                setMidTierMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Mid-Tier(50K-100K Followers)')) {\r\n                setMidTierMaxClicked(true)\r\n                setMicroMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Micro(10K-50K Followers)')) {\r\n                setMicroMaxClicked(true)\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setNanoMaxClicked(false);\r\n            }\r\n            else if (selectedOption1.label.includes('Nano(1K-10K Followers)')) {\r\n                setNanoMaxClicked(true)\r\n                setMidTierMaxClicked(false);\r\n                setMacroMaxClicked(false);\r\n                setMegaMaxClicked(false);\r\n                setMicroMaxClicked(false);\r\n            }\r\n        }\r\n    }, [selectedOption1])\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [isfilterErClicked])\r\n\r\n    useEffect(() => {\r\n        fetchProfiles();\r\n    }, [isfilterFollowerClicked])\r\n\r\n\r\n    const handleAddPlan = () => {\r\n        const data = newPlanClicked ? false : true;\r\n        setNewPlanClicked(data);\r\n    }\r\n\r\n\r\n    const handleCreateList = (listName) => {\r\n        const url = `http://65.0.110.147:4000/createList/${userId}`\r\n        fetch((url), {\r\n            method: 'POST',\r\n            body: JSON.stringify({ listName }),\r\n            headers: {\r\n                'Content-type': 'application/json; charset=UTF-8',\r\n            },\r\n        })\r\n            .then((res) => { res.json() })\r\n            .then((data) => {\r\n                setListInfluencerDetails(data)\r\n            })\r\n        setNewPlanClicked(false);\r\n    }\r\n\r\n    const handleAddToListTable = (e) => {\r\n        setRowClickedData(e.username)\r\n        const toggle = addToListTableClicked ? false : true;\r\n        setAddToListTableClicked(toggle);\r\n    }\r\n\r\n    const handleListClick = (item) => {\r\n        setListClicked(true);\r\n        const url = `http://65.0.110.147:4000/showInfluencersList/${userId}?list=${item.listName}`\r\n        fetch((url))\r\n            .then((data) => data.json())\r\n            .then((response) => {\r\n                setListInfluencersData([response])\r\n            })\r\n    }\r\n\r\n    const addInfluencerToList = (data, item) => {\r\n        const url = `http://65.0.110.147:4000/addInfluencersToList/${userId}?list=${item.listName}&username=${data.username}`\r\n        fetch((url), {\r\n            method: 'POST',\r\n        })\r\n            .then((data) => { data.json() })\r\n            .then((res) => {\r\n                console.log(res)\r\n            })\r\n        setAddToListTableClicked(false)\r\n    }\r\n\r\n    const handleAddToCompare = (data) => {\r\n        const toggle = addToCompareClicked ? false : true;\r\n        setAddToCompareClicked(toggle);\r\n        setAddToCompareData([{ username: data.username }])\r\n    }\r\n\r\n    const handleRemoveInfluencer = (data) => {\r\n        setAddToCompareData((current) => current.filter((item) =>\r\n            item.username !== data.username\r\n        ))\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const query = e.target.value.toLowerCase();\r\n        setValue(query);\r\n        if (query.length > 1) {\r\n            let url = `http://65.0.110.147:4000/filterUsers?username=${query}`\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setSuggestions(res)\r\n                        })\r\n                })\r\n            setSuggestionsActive(true);\r\n        } else {\r\n            setSuggestionsActive(false);\r\n        }\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        setInfluencer(e.target.innerText)\r\n        setSuggestions([]);\r\n        setValue('');\r\n        setSuggestionsActive(false);\r\n        {\r\n            const abc = addToCompareData.find((item) => item.username === e.target.innerText)\r\n            if (!abc) {\r\n                setAddToCompareData([...addToCompareData, { username: e.target.innerText }])\r\n            }\r\n        }\r\n        console.log(addToCompareData)\r\n    };\r\n\r\n    const Suggestions = () => {\r\n        return (\r\n            <div className=\"suggestions\">\r\n                {suggestions.map((suggestion, index) => {\r\n                    return (\r\n                        <div\r\n                            className={index === suggestionIndex ? \"active_inf\" : \"non_active\"}\r\n                            key={index}\r\n                            onClick={handleClick}\r\n                        >\r\n                            <div className='sug_user'>\r\n                                <img src={`https://socialbox-bckt.s3.ap-south-1.amazonaws.com/Images/${suggestion.username}/${suggestion.username}_profile_image.png`} className='profile_image' />\r\n                                <div style={{ marginLeft: '0.5rem' }}>{suggestion.username}</div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    function TablePaginationActions(count) {\r\n        const handleFirstPageButtonClick = (event) => {\r\n            setOffset(0);\r\n            setPage(0);\r\n            setInfluencersData([]);\r\n        };\r\n\r\n        const handleBackButtonClick = (event) => {\r\n            setOffset((prev) => prev - 7);\r\n            setPage(page - 1);\r\n            setInfluencersData([]);\r\n        };\r\n\r\n        const handleNextButtonClick = (event) => {\r\n            setOffset((prev) => prev + 7);\r\n            setPage(page + 1)\r\n            setInfluencersData([]);\r\n        };\r\n\r\n        const handleLastPageButtonClick = (event) => {\r\n            setOffset(totalDataLength - 7)\r\n            setPage(Math.max(0, Math.ceil(count.count / rowsPerPage) - 1));\r\n            setInfluencersData([]);\r\n        };\r\n\r\n        return (\r\n            <div style={{ display: 'flex' }}>\r\n                <IconButton\r\n                    onClick={handleFirstPageButtonClick}\r\n                    disabled={page === 0}\r\n                    aria-label=\"first page\"\r\n                >\r\n                    <FirstPageIcon />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleBackButtonClick}\r\n                    disabled={page === 0}\r\n                    aria-label=\"previous page\"\r\n                >\r\n                    <KeyboardArrowLeft />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleNextButtonClick}\r\n                    aria-label=\"next page\"\r\n                    disabled={page >= Math.ceil(count.count / rowsPerPage) - 1}\r\n                >\r\n                    <KeyboardArrowRight />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={handleLastPageButtonClick}\r\n                    disabled={page >= Math.ceil(count.count / rowsPerPage) - 1}\r\n                    aria-label=\"last page\"\r\n                >\r\n                    <LastPageIcon />\r\n                </IconButton>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const handleCompareInfluencers = () => {\r\n        let params = '';\r\n        let result = ''\r\n        let string = ''\r\n        addToCompareData.map((item) => {\r\n            result += params.concat(params, `&influencers=${item.username}`)\r\n            string = result.substring(1);\r\n        })\r\n        navigate(`/CompareInfluencers/${string}`)\r\n        // const url = `http://65.0.110.147:4000/compareInfluencers?${string}`;\r\n        // fetch(url)\r\n        //     .then((res) => {\r\n        //         res.json()\r\n        //             .then((data) => {\r\n        //                 console.log(data)\r\n        //             })\r\n        //     })\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        const query = e.target.value.toLowerCase();\r\n        setInputValue(query);\r\n        if (query.length > 1) {\r\n            let url = `http://65.0.110.147:4000/filterUsers?username=${query}`\r\n            fetch(url)\r\n                .then((data) => {\r\n                    data.json()\r\n                        .then((res) => {\r\n                            setSuggestions1(res)\r\n                        })\r\n                })\r\n            setSuggestionsForInputActive(true);\r\n        } else {\r\n            setSuggestionsForInputActive(false);\r\n        }\r\n    }\r\n\r\n    const handleInfluencerClick = (e) => {\r\n        navigate(`/profile/${e.target.innerText}`);\r\n        setSuggestions1([]);\r\n        setInputValue('');\r\n        setSuggestionsForInputActive(false);\r\n    };\r\n\r\n    const handleRedirectToResults = () => {\r\n        setAutoSuggestedData([])\r\n        setRedirectedResult(!redirectedResult);\r\n        navigate(`/influencerslist/${inputValue}`);\r\n        setInputValue('');\r\n        setSuggestions1([]);\r\n        setSuggestionsForInputActive(false);\r\n    }\r\n\r\n    const SuggestionsInfluencer = () => {\r\n        return (\r\n            <>\r\n                <div className=\"suggestions_influencer row no-gutters\">\r\n                    <div className=\"col-lg-10 col-md-10 col-sm-10 col-xs-10 col-10\">\r\n                        <div style={{\r\n                            margin: '0.313rem', padding: 0, fontFamily: 'Noto Sans',\r\n                            fontStyle: 'normal',\r\n                            fontWeight: 700,\r\n                            fontSize: '1.125rem',\r\n                            lineHeight: '1rem',\r\n                            color: 'rgba(0, 0, 0, 0.7)'\r\n                        }}>Influencers</div>\r\n                        {suggestions1.map((suggestion, index) => {\r\n                            return (\r\n                                <div\r\n                                    className={index === setSuggestionsForInputActive ? \"active_influencer\" : \"\"}\r\n                                    key={index}\r\n                                    onClick={handleInfluencerClick}\r\n                                >\r\n                                    <div className='sug_user'>\r\n                                        <img src={`https://socialbox-bckt.s3.ap-south-1.amazonaws.com/Images/${suggestion.username}/${suggestion.username}_profile_image.png`} className='profile_image' />\r\n                                        <div style={{ marginLeft: '0.5rem' }}>{suggestion.username}</div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"search_container row no-gutters\">\r\n            <div className='col-lg-2 col-md-2 col-sm-2 col-xs-2  col-2'>\r\n                <Navbar />\r\n            </div>\r\n            <div className=\"search_content_list_panel col-lg-10 col-sm-10 col-md-10 col-xs-10 col-10\">\r\n                <TopBar />\r\n                <div className=\"middle_pane row no-gutters\">\r\n                    <div className=\"input_box_influencer col-lg-10 col-md-10 col-sm-10 col-xs-10 col-10\">\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder='Search for influencers, categories...'\r\n                            value={inputValue}\r\n                            onChange={handleInputChange}\r\n                        />\r\n                        {suggestionsForInputActive && <SuggestionsInfluencer />}\r\n                        <AiOutlineSearch onClick={handleRedirectToResults} />\r\n                    </div>\r\n                    <div className=\"filter_bar row no-gutters\">\r\n                        <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleFollowerFilterClicked} className='filter_btn'>Followers {isfilterFollowerClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-2 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleCategoryFilterClicked} className='filter_btn'>Category {isfilterCategoryClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleErFilterClicked} className='filter_btn'>Engagement Rate {isfilterErClicked === true ? <MdOutlineArrowDropUp /> : <AiFillCaretDown />}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={showVerified} className='filter_btn'>{showVerifiedInfluencers === true ? 'Back' : 'Registered influencers'}</Button>\r\n                        </div>\r\n                        <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4 button_filter\">\r\n                            <Button variant=\"outlined\" onClick={handleClearAllFilters} className='filter_btn'><AiOutlineClose /><span>Clear all filters</span></Button>\r\n                        </div>\r\n                        {\r\n                            isfilterErClicked === true ?\r\n                                <section className=\"modal_section\">\r\n                                    <div className=\"modal_option\">\r\n                                        <div>Engagement %</div>\r\n                                        <Slider\r\n                                            value={rangeEr}\r\n                                            onChange={(e, data) => {\r\n                                                setRangeEr(data)\r\n                                                setSliderErRolled(true);\r\n                                            }}\r\n                                            marks={ErRange}\r\n                                            min={0}\r\n                                            max={20}\r\n                                            step={1}\r\n                                            className='slider'\r\n                                        />\r\n                                        {\r\n                                            silderErRolled === true ?\r\n                                                <>\r\n                                                    <div className=\"followers_count_1\">Minimum ER: {rangeEr[0]}</div>\r\n                                                    <div className=\"followers_count\">Maximum ER: {rangeEr[1]}</div>\r\n                                                </>\r\n                                                :\r\n                                                <>\r\n                                                    <div className=\"followers_count_1\">Minimum ER: {rangeEr[0]}</div>\r\n                                                    <div className=\"followers_count\">Maximum ER: {rangeEr[1]}</div>\r\n                                                </>\r\n                                        }\r\n                                        <div style={{\r\n                                            display: 'flex', justifyContent: 'space-between'\r\n                                        }}>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={filterByErRange}\r\n                                                className='filter_button'\r\n                                            >\r\n                                                Filter\r\n                                            </Button>\r\n                                            <Button\r\n                                                color=\"primary\"\r\n                                                onClick={handleErFilterClicked}\r\n                                                style={{\r\n                                                    background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                    fontWeight: 600,\r\n                                                    fontSize: '0.75rem',\r\n                                                    lineHeight: '1rem',\r\n                                                    textAlign: 'center',\r\n                                                    color: '#595959',\r\n                                                    width: '7.75rem',\r\n                                                    height: '2.25rem',\r\n                                                    marginTop: '2rem'\r\n                                                }}\r\n                                            >\r\n                                                Clear\r\n                                            </Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </section>\r\n                                :\r\n                                isfilterCategoryClicked === true ?\r\n                                    <section className=\"modal_section\">\r\n                                        <div className=\"modal_option\">\r\n                                            <div>Add Category</div>\r\n                                            <Input\r\n                                                placeholder=\"Category\"\r\n                                                className=\"w-50 modal_input\"\r\n                                                type=\"text\"\r\n                                                value={category}\r\n                                                onChange={(e) => { setCategory(e.target.value) }}\r\n                                            />\r\n                                            <div style={{\r\n                                                display: 'flex', justifyContent: 'space-between'\r\n                                            }}>\r\n                                                <Button\r\n                                                    color=\"primary\"\r\n                                                    onClick={filterCategory}\r\n                                                    className='filter_button'\r\n                                                >\r\n                                                    Filter\r\n                                                </Button>\r\n                                                <Button\r\n                                                    color=\"primary\"\r\n                                                    onClick={handleCategoryFilterClicked}\r\n                                                    style={{\r\n                                                        background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                        fontWeight: 600,\r\n                                                        fontSize: '0.75rem',\r\n                                                        lineHeight: '1rem',\r\n                                                        textAlign: 'center',\r\n                                                        color: '#595959',\r\n                                                        width: '7.75rem',\r\n                                                        height: '2.25rem',\r\n                                                        marginTop: '2rem'\r\n                                                    }}\r\n                                                >\r\n                                                    Clear\r\n                                                </Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </section>\r\n                                    :\r\n                                    isfilterFollowerClicked === true ?\r\n                                        <section className=\"modal_section\">\r\n                                            <div className=\"modal_option\">\r\n                                                <div className=\"modal_title\">Followers Count</div>\r\n                                                <div>\r\n                                                    <div className=\"label_slider\">Minimum</div>\r\n                                                    <div style={{ display: 'flex', justifyContent: \"flex-end\" }}>\r\n                                                        <Select\r\n                                                            defaultValue={selectedOption}\r\n                                                            onChange={setSelectedOption}\r\n                                                            options={options}\r\n                                                            className='select_option'\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <Slider\r\n                                                    value={minRangeFollowers}\r\n                                                    onChange={(e, data) => {\r\n                                                        setMinRangeFollowers(data)\r\n                                                        setSliderRolled(true);\r\n                                                    }}\r\n                                                    marks={megaClicked ? megaRange : macroClicked ? macroRange : midTierClicked ? midTierRange : microClicked ? microRange : nanoClicked ? nanoRange : followersRange}\r\n                                                    min={0}\r\n                                                    max={100}\r\n                                                    step={1}\r\n                                                    scale={scale1}\r\n                                                    valueLabelFormat={numFormatter}\r\n                                                    className='slider'\r\n                                                />\r\n                                                <div style={{ paddingTop: '2.25rem' }}>\r\n                                                    <div className=\"label_slider\">Maximum</div>\r\n                                                    <div style={{ display: 'flex', justifyContent: \"flex-end\" }}>\r\n                                                        <Select\r\n                                                            defaultValue={selectedOption1}\r\n                                                            onChange={setSelectedOption1}\r\n                                                            options={options1}\r\n                                                            className='select_option'\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                                <Slider\r\n                                                    value={maxRangeFollowers}\r\n                                                    onChange={(e, data) => {\r\n                                                        setMaxRangeFollowers(data)\r\n                                                        setSlider1Rolled(true);\r\n                                                    }}\r\n                                                    marks={megaMaxClicked ? megaRange : macroMaxClicked ? macroRange : midTierMaxClicked ? midTierRange : microMaxClicked ? microRange : nanoMaxClicked ? nanoRange : followersRange}\r\n                                                    min={0}\r\n                                                    max={100}\r\n                                                    step={1}\r\n                                                    scale={scale}\r\n                                                    valueLabelFormat={numFormatter}\r\n                                                    className='slider'\r\n                                                />\r\n                                                {\r\n                                                    silderRolled === true ?\r\n                                                        <div className=\"followers_count_1\">Minimum Followers Count: {scale1(minRangeFollowers)}</div>\r\n                                                        :\r\n                                                        <div className=\"followers_count_1\">Minimum Followers Count: {minRangeFollowers}</div>\r\n                                                }\r\n                                                {\r\n                                                    sliderRolled1 === true ?\r\n                                                        <div className=\"followers_count\">Maximum Followers Count: {scale(maxRangeFollowers)}</div>\r\n                                                        :\r\n                                                        <div className=\"followers_count\">Maximum Followers Count: {maxRangeFollowers}</div>\r\n                                                }\r\n                                                <div style={{\r\n                                                    display: 'flex', justifyContent: 'space-between'\r\n                                                }}>\r\n                                                    <Button\r\n                                                        color=\"primary\"\r\n                                                        onClick={filterByFollowersRange}\r\n                                                        className='filter_button'\r\n                                                    >\r\n                                                        Filter\r\n                                                    </Button>\r\n                                                    <Button\r\n                                                        color=\"primary\"\r\n                                                        onClick={handleFollowerFilterClicked}\r\n                                                        style={{\r\n                                                            background: '#D7D7D7', borderRadius: '0.188rem', fontFamily: 'Noto Sans', fontStyle: 'normal',\r\n                                                            fontWeight: 600,\r\n                                                            fontSize: '0.75rem',\r\n                                                            lineHeight: '1rem',\r\n                                                            textAlign: 'center',\r\n                                                            color: '#595959',\r\n                                                            width: '7.75rem',\r\n                                                            height: '2.25rem',\r\n                                                            marginTop: '2rem'\r\n                                                        }}\r\n                                                    >\r\n                                                        Clear\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                        : null\r\n                        }\r\n                        <div className=\"download_icon col-lg-2 col-md-3 col-sm-4 col-xs-4 col-4\">\r\n                            <a\r\n                                href={`data:text/csv;charset=utf-8,${(csvData)}`}\r\n                                download=\"filename.csv\"\r\n                                onClick={handleDownloadData}\r\n                            >\r\n                                <AiOutlineDownload size={30} />\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"table_content\">\r\n                        <TableContainer component={Paper} className='table_paper'>\r\n                            <Table stickyHeader className=\"table_container\" >\r\n                                <TableHead className=\"table_head\">\r\n                                    <TableRow className=\"table_row\">\r\n                                        <TableCell className=\"table_head_value\">Instagram Profiles</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Followers</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Engagement</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Like</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Comment</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Avg Reach</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">City</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Category</TableCell>\r\n                                        <TableCell className=\"table_head_value\" align=\"center\">Actions</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {influencersData[0] || categoryFilteredData[0] || verifiedInfluencers[0] ?\r\n                                    <>\r\n                                        <TableBody className=\"table_body\">\r\n                                            {\r\n                                                (rowsPerPage > 0\r\n                                                    ?\r\n                                                    filterCategoryClicked === true ?\r\n                                                        categoryFilteredData.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                        :\r\n                                                        showVerifiedInfluencers === true ?\r\n                                                            verifiedInfluencers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                                            :\r\n                                                            influencersData\r\n                                                    : influencersData\r\n                                                )\r\n                                                    .map((data, index) => (\r\n                                                        <>\r\n                                                            < TableRow key={index} className='table_row_body' >\r\n                                                                <TableCell component=\"th\" scope=\"row\" key={data.username} onClick={() => redirectProfile(data)} className=\"table_body_value_1\" >\r\n                                                                    <div className=\"profile_view\">\r\n                                                                        <img src={`https://socialbox-bckt.s3.ap-south-1.amazonaws.com/Images/${data.username}/${data.username}_profile_image.png`} className='profile_image' />\r\n                                                                        <div style={{ marginLeft: '0.5rem' }}>{data.full_name}</div>\r\n                                                                    </div>\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                                    {NFormatter(data.edge_followed_by.count)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                                    {NFormatter(data.edge_owner_to_timeline_media['edges'][0]?.er)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                                    {NFormatter(data.edge_owner_to_timeline_media['edges'][0]?.avg_likes)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                                    {NFormatter(data.edge_owner_to_timeline_media['edges'][0]?.avg_comment)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">\r\n                                                                    {NFormatter(data.edge_felix_video_timeline['edges'][0]?.averageReelView)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">{data.city_name ? data?.city_name : data?.final_city}</TableCell>\r\n                                                                <TableCell className=\"table_body_value\" align=\"center\">{data.category_enum !== null ? data.category_enum.split('_') : data?.final_category}</TableCell>\r\n                                                                <TableCell className=\"table_body_value\" key={index}>\r\n                                                                    <div className=\"btn_display\">\r\n                                                                        <img id={data.id} src={CostIcon} onClick={(e) => { handleCostClicked(data) }} />\r\n                                                                        {\r\n                                                                            costModalOpened === true ?\r\n                                                                                costUser === data.username ?\r\n                                                                                    <div className='cost_modal'>\r\n                                                                                        <div className='modal_title'>Check Cost </div>\r\n                                                                                        <div className='modal_desc'>The estimated cost for the influencer is as follows,</div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Reel</div>\r\n                                                                                            {\r\n                                                                                                data?.costFactorReel?.minTotalCost || data?.costFactorReel?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorReel?.minTotalCost)} - Rs{NFormatter(data?.costFactorReel?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorReel?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorReel?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Post</div>\r\n                                                                                            {\r\n                                                                                                data?.costFactorPosts?.minTotalCost || data?.costFactorPosts?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorPosts?.minTotalCost)} - Rs{NFormatter(data?.costFactorPosts?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorPosts?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorPosts?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Story</div>\r\n                                                                                            {\r\n                                                                                                data.costFactorStories?.minTotalCost || data?.costFactorStories?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorStories?.minTotalCost)} - Rs{NFormatter(data?.costFactorStories?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorStories?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorStories?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Igtv</div>\r\n                                                                                            {\r\n                                                                                                data?.costFactorIgtv?.minTotalCost || data?.costFactorIgtv?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorIgtv?.minTotalCost)} - Rs{NFormatter(data?.costFactorIgtv?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorIgtv?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorIgtv?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Swipeup Stories</div>\r\n                                                                                            {\r\n                                                                                                data?.costFactorSwipeUp?.minTotalCost || data?.costFactorSwipeUp?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorSwipeUp?.minTotalCost)} - Rs{NFormatter(data?.costFactorSwipeUp?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorSwipeUp?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorSwipeUp?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='cost_box'>\r\n                                                                                            <div>Videos</div>\r\n                                                                                            {\r\n                                                                                                data.costFactorVideo?.minTotalCost || data?.costFactorVideo?.minTotalCost ?\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorVideo?.minTotalCost)} - Rs{NFormatter(data?.costFactorVideo?.maxTotalCost)}</div>\r\n                                                                                                    :\r\n                                                                                                    <div className='cost_value'>: Rs{NFormatter(data?.costFactorVideo?.influencerExactminTotalCost)} - Rs{NFormatter(data?.costFactorVideo?.influencerExactmaxTotalCost)}</div>\r\n                                                                                            }\r\n                                                                                        </div>\r\n                                                                                        <div className='modal_footer'>\r\n                                                                                            To check a more accurate estimate, please contact (+91) 9024236599\r\n                                                                                        </div>\r\n                                                                                        <Button className='close_btn' onClick={handleCostClicked}>Close</Button>\r\n                                                                                    </div>\r\n                                                                                    : null\r\n                                                                                :\r\n                                                                                null\r\n                                                                        }\r\n                                                                        <img id={data.id} onClick={() => { handleAddToListTable(data) }} src={ListIcon} />\r\n                                                                        {addToListTableClicked === true ?\r\n                                                                            [data].map((item) =>\r\n                                                                                item.username == rowClickedData ?\r\n                                                                                    <section className=\"addList_section\" id={data.id}>\r\n                                                                                        <div className=\"addList_option\">\r\n                                                                                            <div style={{ display: 'flex', justifyContent: 'flex-end' }} onClick={handleAddToListTable}><AiOutlineClose /></div>\r\n                                                                                            <div onClick={() => setNewPlanClicked(true)} className='section_dropdown_header'>Add To List</div>\r\n                                                                                            <div className=\"section_list_title\">\r\n                                                                                                Select the list to which you want to add the\r\n                                                                                                influencer.\r\n                                                                                            </div>\r\n                                                                                            <div style={{ overflowY: 'auto', height: '20vh', padding: '0.75rem' }}>\r\n                                                                                                {listData.map((item) =>\r\n                                                                                                    <div className=\"list_options\" onClick={() => { addInfluencerToList(data, item) }}>\r\n                                                                                                        {item.listName}\r\n                                                                                                    </div>\r\n                                                                                                )}\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </section>\r\n                                                                                    : null\r\n                                                                            )\r\n\r\n                                                                            : null}\r\n                                                                        <img id={data.id} onClick={() => handleAddToCompare(data)} src={CompareIcon} />\r\n                                                                        {\r\n                                                                            addToCompareClicked === true ?\r\n\r\n                                                                                [data].map((item) =>\r\n                                                                                    <div className=\"compare_section\">\r\n                                                                                        <div className=\"close_btn\"><AiOutlineClose onClick={() => handleAddToCompare()} /></div>\r\n                                                                                        <div className=\"compare_headers\">\r\n                                                                                            Add to Compare\r\n                                                                                        </div>\r\n                                                                                        <div className=\"compare_title\">\r\n                                                                                            Select the influencer(s) from results to\r\n                                                                                            add to the selection you want to compare. You may\r\n                                                                                            compare upto four influencers.\r\n                                                                                        </div>\r\n                                                                                        <input\r\n                                                                                            type=\"text\"\r\n                                                                                            value={value}\r\n                                                                                            onChange={handleChange}\r\n                                                                                            className=\"compare_input\"\r\n                                                                                        />\r\n                                                                                        {suggestionsActive && <Suggestions />}\r\n                                                                                        <div className=\"influencers_box\">\r\n                                                                                            <div style={{ overflowY: 'auto', height: '20vh' }}>\r\n                                                                                                {\r\n                                                                                                    addToCompareData.length > 0 ?\r\n                                                                                                        <>\r\n                                                                                                            {/* <div className=\"added_influencer\">\r\n                                                                                                            {addToCompareData[0].username} <span><AiOutlineClose onClick={() => { setAddToCompareData([]) }} /></span>\r\n                                                                                                        </div> */}\r\n                                                                                                            {\r\n                                                                                                                addToCompareData.map((data) =>\r\n                                                                                                                    <div className=\"added_influencer\">\r\n                                                                                                                        {data.username}<span><AiOutlineClose onClick={() => { handleRemoveInfluencer(data) }} /></span>\r\n                                                                                                                    </div>\r\n                                                                                                                )\r\n                                                                                                            }\r\n                                                                                                        </>\r\n                                                                                                        : null\r\n                                                                                                }\r\n                                                                                            </div>\r\n                                                                                            <div onClick={() => setAddToCompareData([])} className=\"clear_all\">\r\n                                                                                                Clear all\r\n                                                                                            </div>\r\n                                                                                            <div className=\"btn_pane\">\r\n                                                                                                <Button onClick={handleCompareInfluencers} className='compare_btn'>\r\n                                                                                                    Compare Now\r\n                                                                                                </Button>\r\n                                                                                                <Button className=\"clear_btn\">\r\n                                                                                                    Compare Later\r\n                                                                                                </Button>\r\n                                                                                            </div>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                                : null\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n\r\n                                                        </>\r\n                                                    ))\r\n                                            }\r\n                                        </TableBody>\r\n                                        <TableFooter>\r\n                                            <TableRow className=\"table_foot_row\">\r\n                                                <TablePagination\r\n                                                    rowsPerPageOptions={[7, 14, { label: 'All', value: -1 }]}\r\n                                                    colSpan={3}\r\n                                                    count={showVerifiedInfluencers === true ? verifiedInfluencers.length : filterCategoryClicked === true ? categoryFilteredData.length : totalDataLength}\r\n                                                    rowsPerPage={rowsPerPage}\r\n                                                    page={page}\r\n                                                    SelectProps={{\r\n                                                        inputProps: {\r\n                                                            'aria-label': 'Results per page',\r\n                                                        },\r\n                                                        native: true,\r\n                                                    }}\r\n                                                    // onPageChange={handleChangePage}\r\n                                                    // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                                    ActionsComponent={TablePaginationActions}\r\n                                                    className='table_footer_values'\r\n                                                />\r\n                                            </TableRow>\r\n                                        </TableFooter>\r\n                                    </>\r\n                                    :\r\n                                    <div className='inline_loader'>\r\n                                        <Loader />\r\n                                    </div>}\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default InfluencersList"],"names":["class","num","toFixed","replace","userId","localStorage","getItem","SidebarData","title","path","icon","cName","useState","sidebar","setSidebar","window","innerWidth","width","setWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","isMobile","value","color","className","src","logo","map","item","index","to","showDropDownSelected","setShowDropdownSelected","comparedPageVisited","setComparedPageVisited","userName","navigate","useNavigate","location","useLocation","params","useParams","textToShow","page","text","find","el","pathname","includes","style","display","paddingTop","paddingLeft","alignItems","marginRight","cursor","onClick","clear","options","label","options1","influencersData","setInfluencersData","setPage","rowsPerPage","showVerifiedInfluencers","setShowVerifiedInfluencers","verifiedInfluencers","setVerifiedInfluencers","category","setCategory","isfilterFollowerClicked","setIsFilterFollowerClicked","isfilterCategoryClicked","setIsFilterCategoryClicked","isfilterErClicked","setIsFilterErClicked","setFilterFollowerClicked","filterCategoryClicked","setFilterCategoryClicked","setFilterErClicked","newPlanClicked","setNewPlanClicked","listData","setListData","addToListTableClicked","setAddToListTableClicked","rowClickedData","setRowClickedData","addToCompareClicked","setAddToCompareClicked","addToCompareData","setAddToCompareData","setInfluencer","setAutoSuggestedData","csvData","setCsvData","suggestions","setSuggestions","suggestionIndex","suggestionsActive","setSuggestionsActive","setValue","minRangeFollowers","setMinRangeFollowers","maxRangeFollowers","setMaxRangeFollowers","rangeEr","setRangeEr","silderRolled","setSliderRolled","setSliderErRolled","sliderRolled1","setSlider1Rolled","inputValue","setInputValue","redirectedResult","setRedirectedResult","suggestionsForInputActive","setSuggestionsForInputActive","suggestions1","setSuggestions1","costModalOpened","setCostModalOpened","costUser","setCostUser","allFilterCleared","setAllFilterCleared","nanoClicked","setNanoClicked","microClicked","setMicroClicked","midTierClicked","setMidTierClicked","macroClicked","setMacroClicked","megaClicked","setMegaClicked","nanoMaxClicked","setNanoMaxClicked","microMaxClicked","setMicroMaxClicked","midTierMaxClicked","setMidTierMaxClicked","macroMaxClicked","setMacroMaxClicked","megaMaxClicked","setMegaMaxClicked","selectedOption","setSelectedOption","selectedOption1","setSelectedOption1","categoryFilteredData","setCategoryFilteredData","offset","setOffset","setTotalPages","totalDataLength","setTotalDataLength","inputField","eRange","followerRange","handleFollowerFilterClicked","handleCategoryFilterClicked","handleErFilterClicked","scale","previousMarkIndex","Math","floor","previousMark","megaRange","macroRange","midTierRange","microRange","nanoRange","followersRange","remainder","scaledValue","scale1","previousMarkIndex1","previousMark1","numFormatter","getListData","url","fetch","then","data","json","result","handleDownloadData","headers","res","handleCostClicked","e","username","fetchProfiles","splitArray","splitFollArray","undefined","split","totalPages","catch","err","console","log","handleAddToListTable","handleAddToCompare","handleChange","query","target","toLowerCase","length","handleClick","innerText","Suggestions","suggestion","marginLeft","handleCompareInfluencers","string","concat","substring","handleInfluencerClick","SuggestionsInfluencer","margin","padding","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","TopBar","type","placeholder","onChange","Button","variant","arr","forEach","is_verified","push","Slider","marks","min","max","step","justifyContent","splitFollArr","background","borderRadius","textAlign","height","marginTop","array","category_enum","toUpperCase","defaultValue","valueLabelFormat","href","download","size","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","slice","scope","redirectProfile","full_name","NFormatter","edge_followed_by","count","edge_owner_to_timeline_media","er","avg_likes","avg_comment","edge_felix_video_timeline","averageReelView","city_name","final_city","final_category","id","CostIcon","costFactorReel","minTotalCost","maxTotalCost","influencerExactminTotalCost","influencerExactmaxTotalCost","costFactorPosts","costFactorStories","costFactorIgtv","costFactorSwipeUp","costFactorVideo","ListIcon","overflowY","listName","method","addInfluencerToList","CompareIcon","current","filter","handleRemoveInfluencer","TableFooter","TablePagination","rowsPerPageOptions","colSpan","SelectProps","inputProps","native","ActionsComponent","IconButton","event","disabled","FirstPage","prev","KeyboardArrowLeft","ceil","KeyboardArrowRight","LastPage","Loader"],"sourceRoot":""}